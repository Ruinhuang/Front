{"version":3,"sources":["components/Header/logo.svg","app.jsx","common.jsx","redux/action/index.jsx","utils/index.jsx","components/Ajax/index.jsx","pages/form/login.jsx","pages/form/register.jsx","components/Header/index.jsx","components/Footer/index.jsx","pages/manager/userTable.jsx","components/BaseForm/index.jsx","pages/manager/adTable.jsx","pages/manager/orderTable.jsx","config/menuConfig.jsx","pages/manager/permissionTable.jsx","components/StepForm/index.jsx","pages/ad/index.jsx","pages/home/index.jsx","pages/form/publish.jsx","components/Api/index.jsx","components/NavLeft/index.jsx","mainpage.jsx","pages/nomatch/index.jsx","router.jsx","redux/reducer/index.jsx","redux/store/index.jsx","index.jsx"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","this","props","children","Component","Common","actionTypes","actionCreator","type","data","Option","Select","goToUrl","window","location","href","concat","split","selectTag","arr","items","forEach","item","position","indexOf","push","splice","pagination","callback","onChange","current","parseInt","page","pageSize","page_size","total","showTotal","getOptionList","options","value","id","key","name","Ajax","ajax","method","url","headers","baseURL","timeout","arguments","length","undefined","Promise","resolve","reject","axios","params","then","response","status","res","code","message","info","catch","error","errorInfo","FormItem","Form","Item","FormLogin","post","formData","_this","saveLoginData","sessionStorage","setItem","token","autoLogin","localStorage","removeItem","handleSubmit","form","getFieldsValue","validateFields","err","values","getFieldDecorator","formItemLayout","labelCol","xs","sm","wrapperCol","card","title","es_form","layout","Object","assign","label","initialValue","rules","pattern","RegExp","required","input","placeholder","prefix","icon","span","offset","valuePropName","es_checkbox","style","marginLeft","marginRight","width","es_button","onClick","React","connect","state","isLogin","user","dispatch","create","RadioGroup","Radio","Group","FormRegister","passwordValidator","rule","password","console","log","getBase64","img","reader","FileReader","addEventListener","result","readAsDataURL","handleChange","file","originFileObj","imageUrl","setState","userImg","loading","componentDidMount","offsetLayout","register_FormItem","min","max","validator","es_radio","Header","row","col","src","Logo","alt","float","userName","clearLoginData","Footer","FilterForm","render","userTable_FormItem","es_select","userTable_Option","display","es_switch","checkedChildren","unCheckedChildren","checked","changeGlobalFilter","margin","ruleInfo","changeFilterRules","userType","userTable","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","request","componentDidUpdate","globalFilter","filterForm","resetFields","filterRules","prevState","dataSource","allSource","filter","changeTableType","selectedRowKeys","selectedItems","tableType","defaultFilterRules","Button","roleMap","1","2","3","statusMap","badge","text","columns","dataIndex","sorter","b","userId","sortOrder","modal","visibleModal","visible","onCancel","footer","userTable_UserForm","userInfo","wrappedComponentRef","inst","userForm","userTable_FilterForm","marginTop","defaultChecked","disabled","Modal","confirm","content","JSON","stringify","onOk","toConsumableArray","warning","table","size","bordered","filters","order","rowSelection","onRow","selectedItem","onMouseEnter","onDoubleClick","email","createdAt","UserForm","userTable_RadioGroup","BaseForm","initFormList","formList","formItemList","i","field","list","switchFunc","BaseForm_FormItem","date_picker","showTime","format","colon","fieldsValue","submitFunc","adTable","X-BM-USER-ID","adTypeMap","adTable_UserForm","components_BaseForm","adTable_FormItem","role","adTable_RadioGroup","adTable_Option","orderTable_UserForm","orderTable_FormItem","orderTable_RadioGroup","orderTable_Option","menuList","TreeNode","Tree","PermissionUser","isRoleVisible","handleRole","handleRoleSubmit","roleForm","handlePermission","isPermVisible","detailInfo","menuInfo","getMenus","map","handlePermEditSubmit","permForm","role_key","menus","handleUserAuth","isUserVisible","getRoleUserList","getAuthUserList","roleUsers","targetKeys","handleUserSubmit","user_ids","permissionTable_RoleForm","permissionTable_PermEditForm","patchMenuInfo","checkedKeys","permissionTable_RoleAuthForm","userAuthForm","patchUserInfo","RoleForm","permissionTable_FormItem","permissionTable_Option","PermEditForm","onCheck","_this3","renderTreeNodes","_this4","detail_info","menu_info","role_name","tree","checkable","defaultExpandAll","menuConfig","RoleAuthForm","filterOption","inputValue","option","_this5","transfer","listStyle","height","titles","showSearch","StepForm","react_router_dom","react_router","path","exact","Info","Confirm","refreshData","FormInfo","success","StepForm_FormItem","FormConfirm","componentWillMount","changeFormKey","formKey","Math","random","toString","substr","isInitial","SortOrder","match","afterClose","changeModalKey","StepForm_StepForm","changeMormKey","to","Home","BizCharts","day","scale","range","forceFit","crosshairs","shape","stroke","lineWidth","FormPublish","publish_FormItem","publish_RadioGroup","0","routeMap","/home","component","/ads/index","/manager/users","UserTable","/manager/orders","OrderTable","/manager/ads","AdTable","/manager/permission","PermissionTable","/business/publish","Publish","SubMenu","Menu","NavLeft","renderMenu","menu","mode","MainPage","getItem","autoLoginByToken","src_components_Header","src_components_NavLeft","Footer_Footer","NoMatch","textAlign","fontSize","IRouter","app_App","Login","Register","common_Common","mainpage","Nomatch","defaultState","middleware","thunk","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","apply","store","createStore","previousState","action","newState","parse","ReactDOM","es","router","document","getElementById"],"mappings":"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","file":"static/js/main.3cc28601.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                {this.props.children}\n            </div>\n        );\n    }\n}","import React, { Component } from 'react'\n\nexport default class Common extends Component {\n  render() {\n    return (\n      <div>\n        {\n          this.props.children\n        }\n      </div>\n    )\n  }\n}","// 采用重复编码的方式保障传入的动作描述与定义的一致\nexport const actionTypes = {\n    CLEAR_LOGIN_DATA: 'clear_login_data',\n    SAVE_LOGIN_DATA: 'save_login_data',\n}\n\nexport const actionCreator = {\n    clearLoginData: () => ({\n        type: actionTypes.CLEAR_LOGIN_DATA,\n    }),\n\n    saveLoginData: (data) => ({\n        type: actionTypes.SAVE_LOGIN_DATA,\n        data,\n    }),\n}","import React from 'react'\nimport { Select } from 'antd'\nconst Option = Select.Option\n\nexport const formateDate = (time) => {\n  const checkTime = (time) => {\n    return time < 10 ? \"0\" + time : time\n  }\n  if (!time) return '';\n  let date = new Date(time);\n  return date.getFullYear() + '-' + checkTime(date.getMonth() + 1) +\n    '-' + checkTime(date.getDate()) + ' ' +\n    checkTime(date.getHours()) + \":\" + checkTime(date.getMinutes()) + \":\" + checkTime(date.getSeconds());\n}\n\nexport const goToUrl = p =>\n  window.location.href = `${window.location.href.split('#')[0]}#${p}`\n\nexport const selectTag = (arr, items) => {\n  // 非幂等\n  items.forEach(item => {\n    let position = arr.indexOf(item)\n    if (position < 0) {\n      arr.push(item)\n    } else {\n      arr.splice(position, 1)\n    }\n  });\n  return arr\n}\n\nexport const removeFromArray = (arr, items) => {\n  // 非幂等\n  items.forEach(item => {\n    let position = arr.indexOf(item)\n    if (position >= 0) {\n      arr.splice(position, 1)\n    }\n  });\n  return arr\n}\n\nexport const pagination = (data, callback) => ({\n  onChange: current => callback(current),\n  current: parseInt(data.page),\n  pageSize: parseInt(data.page_size),\n  total: parseInt(data.total),\n  showTotal: () => (`共${data.total}条数据`),\n})\n\n\nexport const getOptionList = data => {\n  let options = []\n  if (!data) {\n    return options\n  }\n  data.forEach(item => {\n    options.push(\n      <Option value={item.id} key={item.id}>\n        {item.name}\n      </Option>\n    )\n  }\n  )\n  return options\n}","import axios from 'axios'\nimport { message } from 'antd';\nexport default class Ajax {\n\tstatic ajax = (\n\t\tmethod,\n\t\turl,\n\t\theaders,\n\t\tdata,\n\t\tbaseURL,\n\t\ttimeout = 5000,\n\t) => new Promise(\n\t\t(resolve, reject) => {\n\t\t\t// Promise是一个包裹者异步操作的对象，它有三个状态:未完成， 已完成， 已失败\n\t\t\t// 构造函数接受一个函数作为参数\n\t\t\t// 该函数的两个参数分别是resolve和reject,它们是两个函数，由 JavaScript 引擎提供，不用自己部署。\n\t\t\t// resolve函数执行会使promise对象变成已完成状态\n\t\t\t// reject函数执行会使promise对象变成已失败状态\n\t\t\taxios(\n\t\t\t\t// axiso 也是一个promise\n\t\t\t\tmethod === 'get' ?\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod,\n\t\t\t\t\t\turl,\n\t\t\t\t\t\theaders,\n\t\t\t\t\t\tparams: data,\n\t\t\t\t\t\tbaseURL,\n\t\t\t\t\t\ttimeout,\n\t\t\t\t\t} : {\n\t\t\t\t\t\tmethod,\n\t\t\t\t\t\theaders,\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tbaseURL,\n\t\t\t\t\t\ttimeout,\n\t\t\t\t\t}\n\t\t\t).then(\n\t\t\t\t// then方法返回的是新的Promise实例\n\t\t\t\t// 如果一个 Promise 对象状态变为resolved，则会调用then方法指定的第一个回调函数\n\t\t\t\t// 第一个参数是上一个promise对象的resolved状态的回调函数\n\t\t\t\t// 第二个参数（可选）是rejected状态的回调函数。\n\t\t\t\t(response) => {\n\t\t\t\t\t// response 是http请求的响应 response.data 可以拿到业务层的数据\n\t\t\t\t\t// http状态码\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tlet res = response.data\n\t\t\t\t\t\t//设定业务反馈代码 200 为 正常\n\t\t\t\t\t\tif (res.status === 200 || res.code === 200 || res.status === 0 || res.code === 0) { //TODO\n\t\t\t\t\t\t\t// 调用resolve或reject并不会终结 Promise 的参数函数的执行\n\t\t\t\t\t\t\t// 参数会被传递给回调函数, 这个参数可以是另一个promise对象\n\t\t\t\t\t\t\t// Promise 的状态一旦改变，就永久保持该状态,无法被再次改变\n\t\t\t\t\t\t\treturn resolve(res)\n\t\t\t\t\t\t\t// console.log('如果没有return 这行会被执行')\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn message.info(res.message)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// else {\n\t\t\t\t\t// 如果没有使用catch方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层，在外层不会退出进程、终止脚本执行\n\t\t\t\t\t// 不推荐使用reject捕获异常， 建议使用catch \n\t\t\t\t\t// return reject(response.data)\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t\t// Promise 对象的错误具有“冒泡”性质，会一直向后传递，错误总是会被下一个catch语句捕获。\n\t\t\t\t// Promise对象的异步操作抛出错误，状态会变为rejected，会调用catch指定的回调函数处理异常\n\t\t\t\t// then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获。\n\t\t\t\t// catch方法返回的还是一个 Promise 对象，后面可以接着调用then方法\n\t\t\t).catch(error => {\n\t\t\t\tlet errorInfo = `\n\t\t\t\t${error.response.data.status} ${error.response.data.error}: ${error.response.data.message} \n\t\t\t\t`\n\t\t\t\tmessage.error(errorInfo)\n\t\t\t}\n\t\t\t\t// 若没有error.response的返回值，则会报错，继续抛出异常\n\t\t\t).catch(() => message.error('网络异常'))\n\t\t}\n\t)\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\"\nimport { actionCreator } from \"../../redux/action\"\nimport { Button, Card, Form, Icon, Input, Checkbox, message } from \"antd\";\nimport { goToUrl } from \"../../utils\"; //导入公共机制\nimport Ajax from '../../components/Ajax'\n\nconst FormItem = Form.Item;\nclass FormLogin extends React.Component {\n  post = (formData) => {\n    Ajax.ajax(\n      'post',\n      '/user-login',\n      {},\n      formData,\n      \"http://207.148.65.10:8080\",\n    )\n      .then(\n        (res) => {\n          this.props.saveLoginData(res.data)\n          sessionStorage.setItem(\"token\", res.data.token);\n          if (this.autoLogin) {\n            //将token存入localStorage\n            localStorage.setItem(\"token\", res.data.token);\n          } else {\n            localStorage.removeItem(\"token\");\n          }\n          goToUrl('/home')\n        }\n      ).catch(() => { })\n  }\n\n  handleSubmit = () => {//绑定提交事件进行校验\n    let formData = this.props.form.getFieldsValue()// 可以(获取表单中)object对象\n    this.props.form.validateFields((err, values) => {\n      if (!err) {// ${}  是变量\n        this.autoLogin = formData.autoLogin\n        this.post(formData)\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const offsetLayout = {\n      wrapperCol: {\n        xs: 24,\n        sm: {\n          span: 12,\n          offset: 4\n        }\n      }\n    };\n    const formItemLayout = {\n      labelCol: {\n        xs: 24,\n        sm: 4\n      },\n      wrapperCol: {\n        xs: 24,\n        sm: 12\n      }\n    };\n    return (\n      <div>\n        <Card title=\"登录\"\n        >\n          <Form\n            layout=\"horizontal\"\n          >\n            <FormItem label=\"手机号\" {...formItemLayout}>\n              {\n                getFieldDecorator('phone', {\n                  initialValue: '',\n                  rules: [\n                    {\n                      pattern: new RegExp('^\\\\d+$', 'g'),\n                      message: '手机号码必须为字母'\n                    },\n                    {\n                      required: true,\n                      message: '手机号不能为空'\n                    },\n                  ]\n                })(\n                  <Input placeholder=\"请输入手机号码\" />\n                )\n              }\n            </FormItem>\n            <FormItem\n              label=\"密码\"\n              {...formItemLayout}\n            >\n              {\n                getFieldDecorator('password', {\n                  initialValue: '',\n                  rules: [{\n                    required: true,\n                    message: '密码不能为空'\n                  }]\n                })(\n                  <Input prefix={<Icon type=\"lock\" />} type=\"password\" placeholder=\"请输入密码\" />\n                )\n              }\n\n            </FormItem>\n            <FormItem  {...offsetLayout}>\n              {\n                getFieldDecorator('autoLogin', {\n                  valuePropName: 'checked',\n                  initialValue: true,\n                })(\n                  <Checkbox>自动登录</Checkbox>\n                )\n              }\n            </FormItem>\n            <FormItem\n              style={{\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                width: 200,\n              }}\n            >\n              <Button type=\"primary\" onClick={this.handleSubmit}>登录</Button>\n              <Button type=\"primary\" onClick={()=>goToUrl('/register')}>去注册</Button>\n            </FormItem>\n          </Form>\n        </Card>\n      </div >\n    )\n  }\n}\n\n// props 属性\nconst mapStateToProps = (state) => ({\n  isLogin: state.isLogin,\n  user: state.user\n})\n\n// props 方法\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    saveLoginData(data) {\n      dispatch(actionCreator.saveLoginData(data))\n    },\n  }\n}\n\n// 把逻辑方法与UI组件连接起来变成新容器组件\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(FormLogin))","import React from 'react';\nimport {\n  Card,\n  Form,\n  Button,\n  Input,\n  Radio,\n  Checkbox,\n  message,\n} from \"antd\";\nimport Ajax from '../../components/Ajax'\nimport '../../style/common.scss'\nimport {goToUrl} from '../../utils'\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nclass FormRegister extends React.Component {\n\n  post = (formData) => {\n    Ajax.ajax(\n      'post',\n      '/user-register',\n      {},\n      formData,\n      \"http://207.148.65.10:8080\",\n    )\n      .then(() => {message.info(\"注册成功\")})\n      // .catch(() => { })\n  }\n\n  passwordValidator = (rule, value, callback) => {\n    let password = this.props.form.getFieldsValue().password\n    console.log(rule, value, password)\n    if (value && value !== password) {\n      callback('密码输入不一致！')\n    }\n    callback()\n  }\n\n  handleSubmit = () => {\n    let formData = this.props.form.getFieldsValue();// 可以(获取表单中)object对象\n    this.post(formData)\n\n\n  };\n  getBase64 = (img, callback) => {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n  };\n\n  handleChange = (info) => {\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      this.getBase64(info.file.originFileObj, imageUrl => this.setState({\n        userImg: imageUrl,\n        loading: false,\n      }));\n    }\n  };\n\n  componentDidMount = () => {\n\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: 24,\n        sm: 4\n      },\n      wrapperCol: {\n        xs: 24,\n        sm: 12\n      }\n    };\n    const offsetLayout = {\n      wrapperCol: {\n        xs: 24,\n        sm: {\n          span: 12,\n          offset: 4\n        }\n      }\n    };\n\n\n    return (\n      <div>\n        <Card title=\"注册\">\n          <Form layout=\"horizontal\">\n            <FormItem label=\"用户名\" {...formItemLayout}>\n              {\n                getFieldDecorator('userName', {\n                  initialValue: '',\n                  rules: [\n                    {\n                      required: true,\n                      message: '用户名不能为空'\n                    },\n                    {\n                      min: 1, max: 16,\n                      message: '长度不在范围内'\n                    },\n                    {\n                      pattern: new RegExp('^\\\\w+$', 'g'),\n                      message: '用户名必须为字母或数字'\n                    }\n                  ]\n                })(\n                  <Input placeholder=\"请输入用户名\" />\n                )\n              }\n            </FormItem>\n            <FormItem label=\"密码\" {...formItemLayout}>\n              {\n                getFieldDecorator('password', {\n                  initialValue: '',\n                  rules: [\n                    {\n                      required: true,\n                      message: '密码不能为空'\n                    },\n                  ]\n\n                })(\n                  <Input placeholder=\"请输入密码\" />\n                )\n              }\n            </FormItem>\n            <FormItem label=\"确认密码\" {...formItemLayout}>\n              {\n                getFieldDecorator('repeat', {\n                  rules: [\n                    {\n                      required: true,\n                      message: '请再次输入密码',\n                    },\n                    {\n\t\t      validator: this.passwordValidator,\n                    }\n                  ],\n                },\n                )(\n                  <Input placeholder=\"请输入密码\" />\n                )\n              }\n            </FormItem>\n            <FormItem label=\"用户角色\" {...formItemLayout}>\n              {\n                getFieldDecorator('userType', {\n                  initialValue: \"0\",\n                  rules: [{\n                    required: true,\n                    message: '用户角色必选'\n                  },\n                  ]\n                }\n                )(\n                  <RadioGroup>\n                    <Radio value={0}>普通用户</Radio>\n                    <Radio value={1}>管理员</Radio>\n                    <Radio value={2}>商户</Radio>\n                  </RadioGroup>\n                )\n              }\n            </FormItem>\n            <FormItem label=\"手机号\" {...formItemLayout}>\n              {\n                getFieldDecorator('phone', {\n                  initialValue: '',\n                  rules: [\n                    {\n                      required: true,\n                      message: '手机号不能为空'\n                    },\n                    {\n                      pattern: new RegExp('^\\\\d+$', 'g'),\n                      message: '手机号码必须为数字'\n                    }\n                  ]\n                })(\n                  <Input placeholder=\"请输入手机号码\" />\n                )\n              }\n            </FormItem>\n            <FormItem label=\"邮箱地址\" {...formItemLayout}>\n              {\n                getFieldDecorator('email', {\n                  initialValue: '',\n                  rules: [\n                    {\n                      required: true,\n                      message: '邮箱地址不能为空'\n                    },\n                    {\n                      pattern: new RegExp(/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/),\n                      message: '请输入正确的邮箱地址'\n                    }\n                  ]\n                })(\n                  <Input placeholder=\"请输入邮箱地址\" />\n                )\n              }\n            </FormItem>\n            <FormItem label=\"身份证号\" {...formItemLayout}>\n              {\n                getFieldDecorator('idcard', {\n                  initialValue: '',\n                  rules: [\n                    {\n                      required: true,\n                      message: '需填写身份证'\n                    },\n                    {\n                      pattern: new RegExp(/^(\\d{6})(\\d{4})(\\d{2})(\\d{2})(\\d{3})([0-9]|X)$/),\n                      message: '请输入正确的身法证号'\n                    }\n                  ]\n                })(\n                  <Input placeholder=\"请输入身份证号\" />\n                )\n              }\n            </FormItem>\n            <FormItem {...offsetLayout}>\n              {\n                getFieldDecorator('register', {\n                  valuePropName: 'checked',\n                  initialValue: true,\n                })(\n                  <Checkbox>我已阅读过<button className=\"link-button\" href=\"#\" >协议</button></Checkbox>\n                )\n              }\n            </FormItem>\n            <FormItem {...offsetLayout}>\n              <Button type=\"primary\" onClick={this.handleSubmit}>注册</Button>\n              <Button type=\"primary\" onClick={()=>goToUrl('/login')}>去登录</Button>\n            </FormItem>\n          </Form>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default Form.create()(FormRegister);\n","import React from \"react\";\nimport { connect } from \"react-redux\"\nimport { actionCreator } from \"../../redux/action\"\nimport Logo from \"./logo.svg\"\nimport { Row, Col, Button } from \"antd\";\nimport \"./index.scss\";\nimport { goToUrl } from \"../../utils\"; //导入公共机制\n\n\nclass Header extends React.Component {\n    //声明 state变量 在setState之前要声明变量\n    render() {\n        return (\n            <div className=\"header\">\n                <Row className=\"header-top\">\n                    <Col span={6} className=\"logo\">\n                        <img src={Logo} alt=\"\" />\n                        <span>Logo</span>\n                    </Col>\n                    <Col span={18} style={{ float: \"right\" }}>\n                        {\n                            this.props.isLogin ?\n                                <span>\n                                    <Button>{this.props.user.userName}</Button>\n                                    <Button onClick={() => {\n                                        goToUrl('/login')\n                                        // 安全退出 需要清空本地缓存的token\n                                        sessionStorage.removeItem(\"token\")\n                                        localStorage.removeItem(\"token\")\n                                        this.props.clearLoginData()\n                                    }}\n                                    >安全登出</Button>\n                                </span>\n                                :\n                                <span>\n                                    <Button onClick={() => goToUrl('/login')}>登录</Button>\n                                    <Button onClick={() => goToUrl('/register')}>注册</Button>\n                                </span>\n                        }\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\n// props 属性\nconst mapStateToProps = (state) => ({\n    isLogin: state.isLogin,\n    user: state.user\n})\n\n// props 方法\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        clearLoginData() {\n            dispatch(actionCreator.clearLoginData())\n        },\n    }\n}\n\n// 把逻辑方法与UI组件连接起来变成新容器组件\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)","import React from 'react';\nimport './index.scss'\nexport default class Footer extends React.Component{\n    render(){\n        return(\n            <div className=\"footer\">\n                版权所有：©2019\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Input, Radio, Card, Table, Form, Modal, Button, message, Badge, Select, Switch } from 'antd';\nimport Ajax from '../../components/Ajax'\nimport { pagination, selectTag } from '../../utils/index'\nimport '../../style/common.scss'\n\nconst FormItem = Form.Item\nconst Option = Select.Option\nconst RadioGroup = Radio.Group\n\n// child component FilterFrom\nclass FilterForm extends React.Component {\n\n  render = () => {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form layout=\"inline\">\n        <FormItem label=\"角色\">\n          {\n            getFieldDecorator('userType',\n              {\n                initialValue: \"\"\n              }\n            )(\n              <Select\n                style={{ width: 100 }}\n              >\n                <Option value=''>全部</Option>\n                <Option value=\"1\">普通用户</Option>\n                <Option value=\"2\">管理员</Option>\n                <Option value=\"3\">商户</Option>\n              </Select>\n            )\n          }\n        </FormItem>\n        <FormItem label=\"状态\">\n          {\n            getFieldDecorator('status',\n              {\n                initialValue: \"\"\n              }\n            )(\n              <Select\n                style={{ width: 100 }}\n              >\n                <Option value='' >全部</Option>\n                {/* <Option value={1}>已审批</Option> */}\n                <Option value=\"1\">已审批</Option>\n                <Option value=\"2\">未审批</Option>\n                <Option value=\"3\">冻结中</Option>\n              </Select>\n            )\n          }\n        </FormItem>\n        <FormItem>\n          <div style={{ display: \"inline-block\" }}>\n            全局过滤\n          <Switch\n              checkedChildren=\"开\"\n              unCheckedChildren=\"关\"\n              onClick={(checked) => this.props.changeGlobalFilter(checked)}\n            />\n          </div>\n          <Button\n            type=\"primary\"\n            style={{ margin: '0 20px' }}\n            onClick={() => {\n              let ruleInfo = this.props.form.getFieldsValue()//object对象,包含表单中所有信息\n              // 根据filterFrom提交的内容构建过滤规则\n              let rules = item => (\n                ((!ruleInfo.status) || (item.status === ruleInfo.status))\n                &&\n                ((!ruleInfo.userType) || (item.userType === ruleInfo.userType))\n              )\n              this.props.changeFilterRules(rules)\n            }}\n          >筛选结果\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nFilterForm = Form.create({})(FilterForm);\n\nexport default class userTable extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      visibleModal: null,\n      loading: true,\n      tableType: \"radio\",\n      dataSource: [],\n      allSource: [],\n      selectedRowKeys: [],\n      selectedItems: [],\n      pagination: {},\n      sortOrder: false,\n      globalFilter: false,\n      defaultFilterRules: () => true,\n    }\n    this.page = 1\n    this.filterRules = this.state.defaultFilterRules\n  }\n\n  componentDidMount = () => {\n    this.request()\n  }\n  componentDidUpdate = () => {\n    if (!this.state.globalFilter) {\n      this.filterForm.props.form.resetFields()\n    }\n  }\n\n  changeFilterRules = rules => {\n    this.filterRules = rules\n    this.setState(prevState => ({ dataSource: prevState.allSource.filter(this.filterRules) }))\n  }\n\n  changeGlobalFilter = checked => {\n    this.setState(\n      () => ({\n        globalFilter: checked,\n      })\n    )\n  }\n\n  changeTableType = checked => {\n    this.setState(\n      () => ({\n        selectedRowKeys: [],\n        selectedItems: [],\n        tableType: checked ? \"checkbox\" : \"radio\",\n      })\n    )\n  }\n\n  request = () => {\n    Ajax.ajax(\n      'get',\n      '/query-all',\n      {},\n      { page: this.page },\n      'http://207.148.65.10:8080',\n    )\n      .then(\n        data => {\n          if (!this.state.globalFilter) {\n            this.filterRules = this.state.defaultFilterRules\n          }\n          this.setState(\n            () => (\n              {\n                allSource: data.data,\n                dataSource: data.data.filter(this.filterRules),\n                loading: false,\n                pagination: pagination(data, (current) => {\n                  this.page = current\n                  if (!this.state.globalFilter) {\n                    // 翻页时将子组件标记重置\n                    this.filterForm.props.form.resetFields()\n                  }\n                  this.request()\n                }),\n              }\n            )\n          )\n        })\n      .catch(\n        () => message.error(\"数据渲染失败\")\n      )\n  }\n\n\n\n  render = () => {\n    const ButtonGroup = Button.Group\n    const roleMap = {\n      1: \"普通用户\",\n      2: \"管理员\",\n      3: \"商户\",\n    }\n    const statusMap = {\n      \"1\": <Badge status=\"success\" text=\"已审批\" />,\n      \"2\": <Badge status=\"default\" text=\"未审批\" />,\n      \"3\": <Badge status=\"error\" text=\"冻结中\" />,\n    }\n    const columns = [\n      {\n        title: 'userId',\n        key: 'userId',\n        width: 80,\n        dataIndex: 'userId',\n        sorter: (a, b) => {\n          return a.userId - b.userId\n        },\n        sortOrder: this.state.sortOrder,\n        // 横向滚动头部锁定\n        // fixed: 'left',\n      },\n      {\n        title: '电话号码',\n        key: 'phone',\n        width: 80,\n        dataIndex: 'phone',\n        // fixed: 'left',\n      },\n      {\n        title: '用户名',\n        key: 'userName',\n        width: 80,\n        dataIndex: 'userName',\n        // fixed: 'left',\n      },\n      {\n        title: '邮箱',\n        key: 'email',\n        width: 80,\n        dataIndex: 'email'\n      },\n      {\n        title: '角色',\n        key: 'userType',\n        width: 80,\n        dataIndex: 'userType',\n        render: (text) => {\n          return roleMap[text]\n        }\n      },\n      {\n        title: '状态',\n        key: 'status',\n        width: 80,\n        dataIndex: 'status',\n        render: (text) => {\n          return statusMap[text]\n        }\n      },\n      // 行内操作按钮\n      // {\n      //   title: 'operation',\n      //   key: 'operation',\n      //   width: 80,\n      //   render: (text, item, index, ) => {\n      //     return (\n      //       <div>\n      //         <Button\n      //           className=\"link-button\"\n      //           icon='edit'\n      //           type=\"primary\"\n      //           onClick={\n      //             () => {\n      //               Modal.confirm({\n      //                 title: 'edit',\n      //                 content: JSON.stringify(item),\n      //                 onOk: (callback = () => {\n      //                   message.info('修改成功')\n      //                 },\n      //                 ) => {\n      //                   message.warning('这里改写成向后端发送验证的流程// TODO')\n      //                   callback()\n      //                   if (this.state.tableType === \"checkbox\") {\n      //                     this.setState((prevState) => ({\n      //                       selectedItems: selectTag([...prevState.selectedItems], [item]),\n      //                       selectedRowKeys: selectTag([...prevState.selectedRowKeys], [item.key])\n      //                     }))\n      //                   }\n      //                 },\n      //                 onCancel: () => {\n      //                   if (this.state.tableType === \"checkbox\") {\n      //                     this.setState((prevState) => ({\n      //                       selectedItems: selectTag([...prevState.selectedItems], [item]),\n      //                       selectedRowKeys: selectTag([...prevState.selectedRowKeys], [item.key])\n      //                     }))\n      //                   }\n      //                 }\n      //               },\n      //               )\n      //             }\n      //           }\n      //         >\n      //           编辑\n      //         </Button>\n      //         <Button\n      //           className=\"link-button\"\n      //           type=\"danger\"\n      //           icon='delete'\n      //           onClick={\n      //             () => {\n      //               Modal.confirm({\n      //                 title: 'delete',\n      //                 content: JSON.stringify(item),\n      //                 onOk: (callback = () => {\n      //                   message.info('删除成功')\n      //                   this.setState((prevState) => ({\n      //                     dataSource: removeFromArray([...prevState.dataSource], [item]),\n      //                     selectedItems: removeFromArray([...prevState.selectedItems], [item]),\n      //                     selectedRowKeys: removeFromArray([...prevState.selectedRowKeys], [item.key])\n      //                   }))\n      //                 },\n      //                 ) => {\n      //                   message.warning('这里改写成向后端发送验证的流程// TODO')\n      //                   callback()\n      //                 },\n      //                 onCancel: () => {\n      //                   if (this.state.tableType === \"checkbox\") {\n      //                     this.setState((prevState) => ({\n      //                       selectedItems: selectTag([...prevState.selectedItems], [item]),\n      //                       selectedRowKeys: selectTag([...prevState.selectedRowKeys], [item.key])\n      //                     }))\n      //                   }\n      //                 }\n      //               }\n      //               )\n      //             }\n      //           }\n      //         >\n      //           删除\n      //         </Button>\n\n      //       </div>\n      //     )\n      //   }\n      // },\n    ];\n\n    return (\n      <div>\n        <Modal\n          visibleModal={this.state.visibleModal}\n          title={this.state.visibleModal}\n          visible={this.state.visibleModal !== null}\n          onCancel={() => {\n            this.setState(() => ({ visibleModal: null }))\n          }}\n          footer={null}\n        >\n          <UserForm\n            userInfo={this.state.selectedItems}\n            wrappedComponentRef={(inst) => this.userForm = inst}\n          />\n        </Modal>\n        <Card>\n          <FilterForm\n            changeFilterRules={this.changeFilterRules}\n            changeGlobalFilter={this.changeGlobalFilter}\n            // 将子组件实例关联到父组件属性上, 方便调用子组件成员变量和函数\n            wrappedComponentRef={(inst) => { this.filterForm = inst }} />\n        </Card>\n        <Card\n          className=\"operate-wrap\"\n          style={{\n            marginTop: '10px',\n          }}>\n          多选模式\n             <Switch\n            checkedChildren=\"开\"\n            unCheckedChildren=\"关\"\n            defaultChecked={this.state.tableType === \"checkbox\"}\n            onClick={(checked) => this.changeTableType(checked)}\n          />\n          <Button\n            icon='edit'\n            type=\"primary\"\n            disabled={this.state.selectedItems.length > 1}\n            onClick={\n              () => {\n                if (this.state.selectedItems.length < 1) return\n                this.setState(() => ({ visibleModal: 'edit' }))\n              }\n            }\n          >\n            编辑\n              </Button>\n          <Button\n            type=\"danger\"\n            icon=\"delete\"\n            onClick={\n              () => {\n                if (this.state.selectedItems.length < 1) return\n                Modal.confirm({\n                  title: 'delete',\n                  content: JSON.stringify(this.state.selectedItems),\n                  onOk: (callback = () => {\n                    message.info('删除成功')\n                    this.setState((prevState) => ({\n                      dataSource: selectTag([...prevState.dataSource], prevState.selectedItems),\n                      selectedItems: [], selectedRowKeys: []\n                    }))\n                  },\n                  ) => {\n                    message.warning('这里改写成向后端发送验证的流程// TODO')\n                    callback()\n                  },\n                }\n                )\n              }\n            }\n          >\n            删除\n            </Button>\n        </Card>\n        <div className=\"content-wrap\">\n          <Table\n            size=\"small\"\n            bordered\n            loading={this.state.loading}\n            columns={columns}\n            // 关闭列表 滚动\n            // scroll={{ \n            //   x: 1440,\n            //   y: 580 \n            // }}  \n            dataSource={this.state.dataSource}\n            //若没有pagination属性，会根据antd中table的默认样式，每页显示10个数据，将这一次请求获得的数据进行纯前端样式的静态的分页，*点击切换页面按钮不会发送请求\n            // 若 有 pagination={false}的 设定，tab le不会分页， 此次请求获得的所有数据会全部显示出来\n            // pagination={this.state.pagination}\n            pagination={false}\n            // onChange 事件会自动传入这三个参数\n            onChange={(pagination, filters, sorter) => {\n              this.setState(() => ({\n                sortOrder: sorter.order\n              }))\n            }}\n            rowSelection={\n              {\n                type: this.state.tableType,\n                selectedRowKeys: this.state.selectedRowKeys,\n                // 点击行首小圆圈才能触发onChange事件\n                onChange: (selectedRowKeys, selectedItems) => {\n                  this.setState(() => ({\n                    selectedRowKeys,\n                    selectedItems,\n                  }),\n                  )\n                }\n              }\n            }\n            onRow={(selectedItem) => ({\n              onClick: () => {\n                if (this.state.tableType === 'checkbox') {\n                  let selectedItems = selectTag([...this.state.selectedItems], [selectedItem])\n                  let selectedRowKeys = selectTag([...this.state.selectedRowKeys], [selectedItem.key])\n                  this.setState(() => ({\n                    selectedRowKeys,\n                    selectedItems,\n                  }))\n                }\n                if (this.state.tableType === 'radio') {\n                  let selectedItems = [selectedItem]\n                  let selectedRowKeys = [selectedItem.key]\n                  this.setState(() => ({\n                    selectedRowKeys,\n                    selectedItems,\n                  }))\n                }\n              },\n              onMouseEnter: () => { },\n              onDoubleClick: () => {\n                Modal.confirm({\n                  title: '详细信息',\n                  content: `\n                  ${selectedItem.userName}\n                  ${roleMap[selectedItem.userType]}\n                  ${selectedItem.email}\n                  ${selectedItem.createdAt}\n                `,\n                  onCancel: () => { },\n                  onOk: () => { },\n                })\n              },\n            }\n            )}\n          />\n        </div>\n      </div >\n    )\n  }\n}\n\nclass UserForm extends React.Component {\n\n  render() {\n    let userInfo = this.props.userInfo[0] || {};\n    const formItemLayout = {\n      labelCol: {\n        span: 5\n      },\n      wrapperCol: {\n        span: 19\n      }\n    };\n\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form layout=\"horizontal\">\n        <FormItem label=\"用户名\" {...formItemLayout}>\n          {\n            getFieldDecorator('userName', {\n              initialValue: userInfo.userName\n            })(\n              <Input type=\"text\" placeholder=\"请输入用户名\" />\n            )\n          }\n        </FormItem>\n        <FormItem label=\"角色\" {...formItemLayout}>\n          {\n            getFieldDecorator('userType', {\n              initialValue: userInfo.userType\n            })(\n              <RadioGroup>\n                <Radio value=\"1\">用户</Radio>\n                <Radio value=\"2\">商户</Radio>\n              </RadioGroup>\n            )\n          }\n        </FormItem>\n        <FormItem label=\"状态\" {...formItemLayout}>\n          {\n            getFieldDecorator('status', {\n              initialValue: userInfo.status\n            })(\n              <Select>\n                <Option value=\"1\">已审核</Option>\n                <Option value=\"2\">未审核</Option>\n                <Option value=\"3\">已冻结</Option>\n              </Select>\n            )\n          }\n        </FormItem>\n        <FormItem>\n          <Button\n            onClick={() => { message.warning('这里改写成向后端发送验证的流程// TODO') }}\n          >\n            提交\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nUserForm = Form.create({})(UserForm);","import React, { Component } from 'react'\nimport { Input, Select, Form, Checkbox, Switch, Button, DatePicker } from 'antd'\nimport { getOptionList } from '../../utils'\nconst FormItem = Form.Item\n\nclass BaseForm extends Component {\n\n    initFormList = () => {\n        const { getFieldDecorator } = this.props.form\n        const formList = this.props.formList\n        const formItemList = []\n        if (formList && formList.length > 0) {\n            formList.forEach(\n                (item, i) => {\n                    let label = item.label\n                    let field = item.field\n                    let initialValue = item.initialValue || \"\"\n                    let placeholder = item.placeholder\n                    let width = item.width\n                    let list = item.list\n                    let type = item.type\n                    let switchFunc = item.switchFunc\n                    if (type === \"SWITCH\") {\n                        formItemList.push(\n                            <FormItem label={label} key={field} >\n                                {\n                                    getFieldDecorator(field, {\n                                        initialValue,\n                                    })(\n                                        <Switch\n                                            checkedChildren=\"开\"\n                                            unCheckedChildren=\"关\"\n                                            onClick={(checked) => switchFunc(checked)}\n                                        />\n                                    )\n                                }\n                            </FormItem>\n                        )\n                    }\n                    if (type === \"INPUT\") {\n                        formItemList.push(\n                            <FormItem label={label} key={field} >\n                                {\n                                    getFieldDecorator(field, {\n                                        initialValue,\n                                    })(\n                                        <Input type=\"text\" placeholder={placeholder} />\n                                    )\n                                }\n                            </FormItem>\n                        )\n                    }\n                    if (type === \"CHECKBOX\") {\n                        formItemList.push(\n                            <FormItem label={label} key={field} >\n                                {\n                                    getFieldDecorator(field, {\n                                        valuePropName: 'checked',\n                                        initialValue,// true|false\n                                    })(\n                                        <Checkbox>\n                                            {label}\n                                        </Checkbox>\n                                    )\n                                }\n                            </FormItem>\n                        )\n                    }\n                    if (item.type === 'TIME') {\n                        formItemList.push(\n                            <FormItem label=\"时间\" key={field}>\n                                {\n                                    getFieldDecorator('begin_time')(\n                                        <DatePicker\n                                            showTime={true}\n                                            placeholder={placeholder}\n                                            format=\"YYYY-MM-DD HH:mm:ss\" />\n                                    )\n                                }\n                            </FormItem >\n                        )\n                        formItemList.push(\n                            <FormItem label=\"~\" colon={false} key={field}>\n                                {\n                                    getFieldDecorator('end_time')(\n                                        <DatePicker\n                                            showTime={true}\n                                            placeholder={placeholder}\n                                            format=\"YYYY-MM-DD HH:mm:ss\" />\n                                    )\n                                }\n                            </FormItem>\n                        )\n                    }\n                    if (type === \"SELECT\") {\n                        formItemList.push(\n                            <FormItem label={label} key={field} >\n                                {\n                                    getFieldDecorator(field, {\n                                        initialValue,\n                                    })(\n                                        <Select\n                                            style={{ width }}\n                                            placeholder={placeholder}\n                                        >\n                                            {getOptionList(list)}\n                                        </Select>\n                                    )\n                                }\n                            </FormItem>\n                        )\n                    }\n                }\n            )\n        }\n        return formItemList\n    }\n\n    handleSubmit = () => {\n        let fieldsValue = this.props.form.getFieldsValue()\n        console.log(fieldsValue)\n        // 由父组件传入的函数处理表单提交的数据\n        this.props.submitFunc(fieldsValue)\n    }\n\n    render() {\n        return (\n            <Form layout={this.props.layout}>\n                {this.initFormList()}\n                <Button type=\"primary\" onClick={() => this.handleSubmit()}>\n                    Done\n                </Button>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(BaseForm)","import React from 'react';\r\nimport { Card, Input, Radio, Table, Form, Modal, Button, message, Badge, Select } from 'antd';\r\nimport Ajax from '../../components/Ajax'\r\nimport { pagination, selectTag } from '../../utils/index'\r\nimport '../../style/common.scss'\r\nimport BaseForm from '../../components/BaseForm'\r\n\r\nconst FormItem = Form.Item\r\nconst Option = Select.Option\r\nconst RadioGroup = Radio.Group\r\n\r\nexport default class adTable extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            visibleModal: null,\r\n            loading: true,\r\n            tableType: \"radio\",\r\n            dataSource: [],\r\n            allSource: [],\r\n            selectedRowKeys: [],\r\n            selectedItems: [],\r\n            pagination: {},\r\n            sortOrder: false,\r\n        }\r\n        this.page = 1\r\n        this.formList = [\r\n            {\r\n                type: 'SELECT',\r\n                label: '订单类型',\r\n                field: 'type',\r\n                placeholder: '全部',\r\n                initialValue: '',\r\n                width: 100,\r\n                list: [{ id: '', name: '全部' }, { id: '1', name: '买入' }, { id: '2', name: '卖出' }]\r\n            },\r\n            {\r\n                type: 'SELECT',\r\n                label: '订单状态',\r\n                field: 'status',\r\n                placeholder: '全部',\r\n                initialValue: '1',\r\n                width: 100,\r\n                list: [{ id: '0', name: '全部' }, { id: '1', name: '待付款' }, { id: '2', name: '待确认' }, { id: '3', name: '已完成' }, { id: '4', name: '已过期' }]\r\n            },\r\n        ]\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.request()\r\n    }\r\n\r\n    changeTableType = checked => {\r\n        this.setState(\r\n            () => ({\r\n                selectedRowKeys: [],\r\n                selectedItems: [],\r\n                tableType: checked ? \"checkbox\" : \"radio\",\r\n            })\r\n        )\r\n    }\r\n\r\n    request = () => {\r\n        Ajax.ajax(\r\n            'get',\r\n            '/ad/page',\r\n            { \"X-BM-USER-ID\": '1' },\r\n            // {},\r\n            { type: \"buy\" },\r\n            // 'https://mook.sunlin.fun/mock/9',\r\n            'http://45.76.14.27',\r\n        )\r\n            .then(\r\n                data => {\r\n                    this.setState(\r\n                        () => (\r\n                            {\r\n                                dataSource: data.list,\r\n                                loading: false,\r\n                                pagination: pagination(data, (current) => {\r\n                                    this.page = current\r\n                                    this.request()\r\n                                }),\r\n                            }\r\n                        )\r\n                    )\r\n                })\r\n            .catch(\r\n                () => message.error(\"数据渲染失败\")\r\n            )\r\n    }\r\n\r\n    render = () => {\r\n        const statusMap = {\r\n            1: <Badge status=\"success\" text=\"展示中\" />,\r\n            2: <Badge status=\"error\" text=\"未展示\" />,\r\n        }\r\n        const adTypeMap = {\r\n            1: <Badge status=\"success\" text=\"买入积分\" />,\r\n            2: <Badge status=\"default\" text=\"卖出积分\" />,\r\n        }\r\n        const columns = [\r\n            {\r\n                title: 'adID',\r\n                key: 'key',\r\n                width: 80,\r\n                dataIndex: 'key',\r\n            },\r\n            {\r\n                title: '商户',\r\n                key: 'name',\r\n                width: 80,\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: 'price',\r\n                key: 'price',\r\n                width: 80,\r\n                dataIndex: 'price',\r\n            },\r\n            {\r\n                title: '商户广告类型',\r\n                key: 'adType',\r\n                width: 80,\r\n                dataIndex: 'adType',\r\n                render: (text) => {\r\n                    return adTypeMap[text]\r\n                },\r\n            },\r\n            {\r\n                title: '状态',\r\n                key: 'status',\r\n                width: 80,\r\n                dataIndex: 'status',\r\n                render: (text) => {\r\n                    return statusMap[text]\r\n                },\r\n                sorter: (a, b) => {\r\n                    return a.status - b.status\r\n                },\r\n                sortOrder: this.state.sortOrder,\r\n            },\r\n            // 行内操作按钮\r\n            // {\r\n            //   title: 'operation',\r\n            //   key: 'operation',\r\n            //   width: 80,\r\n            //   render: (text, item, index, ) => {\r\n            //     return (\r\n            //       <div>\r\n            //         <Button\r\n            //           className=\"link-button\"\r\n            //           icon='edit'\r\n            //           type=\"primary\"\r\n            //           onClick={\r\n            //             () => {\r\n            //               Modal.confirm({\r\n            //                 title: 'edit',\r\n            //                 content: JSON.stringify(item),\r\n            //                 onOk: (callback = () => {\r\n            //                   message.info('修改成功')\r\n            //                 },\r\n            //                 ) => {\r\n            //                   message.warning('这里改写成向后端发送验证的流程// TODO')\r\n            //                   callback()\r\n            //                   if (this.state.tableType === \"checkbox\") {\r\n            //                     this.setState((prevState) => ({\r\n            //                       selectedItems: selectTag([...prevState.selectedItems], [item]),\r\n            //                       selectedRowKeys: selectTag([...prevState.selectedRowKeys], [item.key])\r\n            //                     }))\r\n            //                   }\r\n            //                 },\r\n            //                 onCancel: () => {\r\n            //                   if (this.state.tableType === \"checkbox\") {\r\n            //                     this.setState((prevState) => ({\r\n            //                       selectedItems: selectTag([...prevState.selectedItems], [item]),\r\n            //                       selectedRowKeys: selectTag([...prevState.selectedRowKeys], [item.key])\r\n            //                     }))\r\n            //                   }\r\n            //                 }\r\n            //               },\r\n            //               )\r\n            //             }\r\n            //           }\r\n            //         >\r\n            //           编辑\r\n            //         </Button>\r\n            //         <Button\r\n            //           className=\"link-button\"\r\n            //           type=\"danger\"\r\n            //           icon='delete'\r\n            //           onClick={\r\n            //             () => {\r\n            //               Modal.confirm({\r\n            //                 title: 'delete',\r\n            //                 content: JSON.stringify(item),\r\n            //                 onOk: (callback = () => {\r\n            //                   message.info('删除成功')\r\n            //                   this.setState((prevState) => ({\r\n            //                     dataSource: removeFromArray([...prevState.dataSource], [item]),\r\n            //                     selectedItems: removeFromArray([...prevState.selectedItems], [item]),\r\n            //                     selectedRowKeys: removeFromArray([...prevState.selectedRowKeys], [item.key])\r\n            //                   }))\r\n            //                 },\r\n            //                 ) => {\r\n            //                   message.warning('这里改写成向后端发送验证的流程// TODO')\r\n            //                   callback()\r\n            //                 },\r\n            //                 onCancel: () => {\r\n            //                   if (this.state.tableType === \"checkbox\") {\r\n            //                     this.setState((prevState) => ({\r\n            //                       selectedItems: selectTag([...prevState.selectedItems], [item]),\r\n            //                       selectedRowKeys: selectTag([...prevState.selectedRowKeys], [item.key])\r\n            //                     }))\r\n            //                   }\r\n            //                 }\r\n            //               }\r\n            //               )\r\n            //             }\r\n            //           }\r\n            //         >\r\n            //           删除\r\n            //         </Button>\r\n\r\n            //       </div>\r\n            //     )\r\n            //   }\r\n            // },\r\n        ];\r\n\r\n        return (\r\n            <div>\r\n                <Modal\r\n                    visibleModal={this.state.visibleModal}\r\n                    title={this.state.visibleModal}\r\n                    visible={this.state.visibleModal !== null}\r\n                    onCancel={() => {\r\n                        this.setState(() => ({ visibleModal: null }))\r\n                    }}\r\n                    footer={null}\r\n                >\r\n                    <UserForm\r\n                        userInfo={this.state.selectedItems}\r\n                        wrappedComponentRef={(inst) => this.userForm = inst}\r\n                    />\r\n                </Modal>\r\n                <Card>\r\n                    <BaseForm layout=\"inline\" submitFunc={() => { }} switchFunc={() => { }} formList={this.formList} />\r\n                </Card>\r\n                <Card>\r\n                    <Button\r\n                        icon='edit'\r\n                        type=\"primary\"\r\n                        disabled={this.state.selectedItems.length > 1}\r\n                        onClick={\r\n                            () => {\r\n                                if (this.state.selectedItems.length < 1) return\r\n                                this.setState(() => ({ visibleModal: 'edit' }))\r\n                            }\r\n                        }\r\n                    >\r\n                        编辑\r\n              </Button>\r\n                    <Button\r\n                        type=\"danger\"\r\n                        icon=\"delete\"\r\n                        onClick={\r\n                            () => {\r\n                                if (this.state.selectedItems.length < 1) return\r\n                                Modal.confirm({\r\n                                    title: 'delete',\r\n                                    content: JSON.stringify(this.state.selectedItems),\r\n                                    onOk: (callback = () => {\r\n                                        message.info('删除成功')\r\n                                        this.setState((prevState) => ({\r\n                                            dataSource: selectTag([...prevState.dataSource], prevState.selectedItems),\r\n                                            selectedItems: [], selectedRowKeys: []\r\n                                        }))\r\n                                    },\r\n                                    ) => {\r\n                                        message.warning('这里改写成向后端发送验证的流程// TODO')\r\n                                        callback()\r\n                                    },\r\n                                }\r\n                                )\r\n                            }\r\n                        }\r\n                    >\r\n                        删除\r\n            </Button>\r\n                </Card>\r\n                <div className=\"content-wrap\">\r\n                    <Table\r\n                        size=\"small\"\r\n                        bordered\r\n                        loading={this.state.loading}\r\n                        columns={columns}\r\n                        // 关闭列表 滚动\r\n                        // scroll={{ \r\n                        //   x: 1440,\r\n                        //   y: 580 \r\n                        // }}  \r\n                        dataSource={this.state.dataSource}\r\n                        //若没有pagination属性，会根据antd中table的默认样式，每页显示10个数据，将这一次请求获得的数据进行纯前端样式的静态的分页，*点击切换页面按钮不会发送请求\r\n                        // 若 有 pagination={false}的 设定，table不会分页， 此次请求获得的所有数据会全部显示出来\r\n                        pagination={this.state.pagination}\r\n                        // pagination={false}\r\n                        // onChange 事件会自动传入这三个参数\r\n                        onChange={(pagination, filters, sorter) => {\r\n                            this.setState(() => ({\r\n                                sortOrder: sorter.order\r\n                            }))\r\n                        }}\r\n                        rowSelection={\r\n                            {\r\n                                type: this.state.tableType,\r\n                                selectedRowKeys: this.state.selectedRowKeys,\r\n                                // 点击行首小圆圈才能触发onChange事件\r\n                                onChange: (selectedRowKeys, selectedItems) => {\r\n                                    this.setState(() => ({\r\n                                        selectedRowKeys,\r\n                                        selectedItems,\r\n                                    }),\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                        onRow={(selectedItem) => ({\r\n                            onClick: () => {\r\n                                if (this.state.tableType === 'checkbox') {\r\n                                    let selectedItems = selectTag([...this.state.selectedItems], [selectedItem])\r\n                                    let selectedRowKeys = selectTag([...this.state.selectedRowKeys], [selectedItem.key])\r\n                                    this.setState(() => ({\r\n                                        selectedRowKeys,\r\n                                        selectedItems,\r\n                                    }))\r\n                                }\r\n                                if (this.state.tableType === 'radio') {\r\n                                    let selectedItems = [selectedItem]\r\n                                    let selectedRowKeys = [selectedItem.key]\r\n                                    this.setState(() => ({\r\n                                        selectedRowKeys,\r\n                                        selectedItems,\r\n                                    }))\r\n                                }\r\n                            },\r\n                            onMouseEnter: () => { },\r\n                            onDoubleClick: () => {\r\n                                Modal.confirm({\r\n                                    title: '详细信息',\r\n                                    content: `\r\n                  ${selectedItem.name}\r\n                  ${selectedItem.email}\r\n                `,\r\n                                    onCancel: () => { },\r\n                                    onOk: () => { },\r\n                                })\r\n                            },\r\n                        }\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nclass UserForm extends React.Component {\r\n\r\n    render() {\r\n        let userInfo = this.props.userInfo[0] || {};\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                span: 5\r\n            },\r\n            wrapperCol: {\r\n                span: 19\r\n            }\r\n        };\r\n\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form layout=\"horizontal\">\r\n                <FormItem label=\"用户\" {...formItemLayout}>\r\n                    {\r\n                        getFieldDecorator('name', {\r\n                            initialValue: userInfo.name\r\n                        })(\r\n                            <Input type=\"text\" placeholder=\"请输入用户名\" />\r\n                        )\r\n                    }\r\n                </FormItem>\r\n                <FormItem label=\"商户\" {...formItemLayout}>\r\n                    {\r\n                        getFieldDecorator('names', {\r\n                            initialValue: userInfo.role\r\n                        })(\r\n                            <RadioGroup>\r\n                                <Radio value={1}>用户</Radio>\r\n                                <Radio value={2}>商户</Radio>\r\n                            </RadioGroup>\r\n                        )\r\n                    }\r\n                </FormItem>\r\n                <FormItem label=\"状态\" {...formItemLayout}>\r\n                    {\r\n                        getFieldDecorator('status', {\r\n                            initialValue: userInfo.status\r\n                        })(\r\n                            <Select>\r\n                                <Option value={1}>已审核</Option>\r\n                                <Option value={2}>未审核</Option>\r\n                                <Option value={3}>已冻结</Option>\r\n                            </Select>\r\n                        )\r\n                    }\r\n                </FormItem>\r\n                <FormItem>\r\n                    <Button\r\n                        onClick={() => { message.warning('这里改写成向后端发送验证的流程// TODO') }}\r\n                    >\r\n                        提交\r\n          </Button>\r\n                </FormItem>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nUserForm = Form.create({})(UserForm);","import React from 'react';\nimport { Card, Input, Radio, Table, Form, Modal, Button, message, Badge, Select } from 'antd';\nimport Ajax from '../../components/Ajax'\nimport { pagination, selectTag } from '../../utils/index'\nimport '../../style/common.scss'\nimport BaseForm from '../../components/BaseForm'\n\nconst FormItem = Form.Item\nconst Option = Select.Option\nconst RadioGroup = Radio.Group\n\nexport default class adTable extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            visibleModal: null,\n            loading: true,\n            tableType: \"radio\",\n            dataSource: [],\n            allSource: [],\n            selectedRowKeys: [],\n            selectedItems: [],\n            pagination: {},\n            sortOrder: false,\n        }\n        this.page = 1\n        this.formList = [\n            {\n                type: 'SELECT',\n                label: '订单类型',\n                field: 'type',\n                placeholder: '全部',\n                initialValue: '',\n                width: 100,\n                list: [{ id: '', name: '全部' }, { id: '1', name: '买入' }, { id: '2', name: '卖出' }]\n            },\n            {\n                type: 'SELECT',\n                label: '订单状态',\n                field: 'status',\n                placeholder: '全部',\n                initialValue: '1',\n                width: 100,\n                list: [{ id: '0', name: '全部' }, { id: '1', name: '待付款' }, { id: '2', name: '待确认' }, { id: '3', name: '已完成' }, { id: '4', name: '已过期' }]\n            },\n        ]\n    }\n\n    componentDidMount = () => {\n        this.request()\n    }\n\n    changeTableType = checked => {\n        this.setState(\n            () => ({\n                selectedRowKeys: [],\n                selectedItems: [],\n                tableType: checked ? \"checkbox\" : \"radio\",\n            })\n        )\n    }\n\n    request = () => {\n        Ajax.ajax(\n            'get',\n            '/v1/ads',\n            {},\n            { page: this.page },\n            'https://mook.sunlin.fun/mock/9',\n        )\n            .then(\n                data => {\n                    this.setState(\n                        () => (\n                            {\n                                dataSource: data.list,\n                                loading: false,\n                                pagination: pagination(data, (current) => {\n                                    this.page = current\n                                    this.request()\n                                }),\n                            }\n                        )\n                    )\n                })\n            .catch(\n                () => message.error(\"数据渲染失败\")\n            )\n    }\n\n    render = () => {\n        const statusMap = {\n            1: <Badge status=\"success\" text=\"展示中\" />,\n            2: <Badge status=\"error\" text=\"未展示\" />,\n        }\n        const adTypeMap = {\n            1: <Badge status=\"success\" text=\"买入积分\" />,\n            2: <Badge status=\"default\" text=\"卖出积分\" />,\n        }\n        const columns = [\n            {\n                title: 'adID',\n                key: 'key',\n                width: 80,\n                dataIndex: 'key',\n            },\n            {\n                title: '商户',\n                key: 'name',\n                width: 80,\n                dataIndex: 'name',\n            },\n            {\n                title: 'price',\n                key: 'price',\n                width: 80,\n                dataIndex: 'price',\n            },\n            {\n                title: '商户广告类型',\n                key: 'adType',\n                width: 80,\n                dataIndex: 'adType',\n                render: (text) => {\n                    return adTypeMap[text]\n                },\n            },\n            {\n                title: '状态',\n                key: 'status',\n                width: 80,\n                dataIndex: 'status',\n                render: (text) => {\n                    return statusMap[text]\n                },\n                sorter: (a, b) => {\n                    return a.status - b.status\n                },\n                sortOrder: this.state.sortOrder,\n            },\n            // 行内操作按钮\n            // {\n            //   title: 'operation',\n            //   key: 'operation',\n            //   width: 80,\n            //   render: (text, item, index, ) => {\n            //     return (\n            //       <div>\n            //         <Button\n            //           className=\"link-button\"\n            //           icon='edit'\n            //           type=\"primary\"\n            //           onClick={\n            //             () => {\n            //               Modal.confirm({\n            //                 title: 'edit',\n            //                 content: JSON.stringify(item),\n            //                 onOk: (callback = () => {\n            //                   message.info('修改成功')\n            //                 },\n            //                 ) => {\n            //                   message.warning('这里改写成向后端发送验证的流程// TODO')\n            //                   callback()\n            //                   if (this.state.tableType === \"checkbox\") {\n            //                     this.setState((prevState) => ({\n            //                       selectedItems: selectTag([...prevState.selectedItems], [item]),\n            //                       selectedRowKeys: selectTag([...prevState.selectedRowKeys], [item.key])\n            //                     }))\n            //                   }\n            //                 },\n            //                 onCancel: () => {\n            //                   if (this.state.tableType === \"checkbox\") {\n            //                     this.setState((prevState) => ({\n            //                       selectedItems: selectTag([...prevState.selectedItems], [item]),\n            //                       selectedRowKeys: selectTag([...prevState.selectedRowKeys], [item.key])\n            //                     }))\n            //                   }\n            //                 }\n            //               },\n            //               )\n            //             }\n            //           }\n            //         >\n            //           编辑\n            //         </Button>\n            //         <Button\n            //           className=\"link-button\"\n            //           type=\"danger\"\n            //           icon='delete'\n            //           onClick={\n            //             () => {\n            //               Modal.confirm({\n            //                 title: 'delete',\n            //                 content: JSON.stringify(item),\n            //                 onOk: (callback = () => {\n            //                   message.info('删除成功')\n            //                   this.setState((prevState) => ({\n            //                     dataSource: removeFromArray([...prevState.dataSource], [item]),\n            //                     selectedItems: removeFromArray([...prevState.selectedItems], [item]),\n            //                     selectedRowKeys: removeFromArray([...prevState.selectedRowKeys], [item.key])\n            //                   }))\n            //                 },\n            //                 ) => {\n            //                   message.warning('这里改写成向后端发送验证的流程// TODO')\n            //                   callback()\n            //                 },\n            //                 onCancel: () => {\n            //                   if (this.state.tableType === \"checkbox\") {\n            //                     this.setState((prevState) => ({\n            //                       selectedItems: selectTag([...prevState.selectedItems], [item]),\n            //                       selectedRowKeys: selectTag([...prevState.selectedRowKeys], [item.key])\n            //                     }))\n            //                   }\n            //                 }\n            //               }\n            //               )\n            //             }\n            //           }\n            //         >\n            //           删除\n            //         </Button>\n\n            //       </div>\n            //     )\n            //   }\n            // },\n        ];\n\n        return (\n            <div>\n                <Modal\n                    visibleModal={this.state.visibleModal}\n                    title={this.state.visibleModal}\n                    visible={this.state.visibleModal !== null}\n                    onCancel={() => {\n                        this.setState(() => ({ visibleModal: null }))\n                    }}\n                    footer={null}\n                >\n                    <UserForm\n                        userInfo={this.state.selectedItems}\n                        wrappedComponentRef={(inst) => this.userForm = inst}\n                    />\n                </Modal>\n                <Card>\n                    <BaseForm layout=\"inline\" submitFunc={() => { }} switchFunc={() => { }} formList={this.formList} />\n                </Card>\n                <Card>\n                    <Button\n                        icon='edit'\n                        type=\"primary\"\n                        disabled={this.state.selectedItems.length > 1}\n                        onClick={\n                            () => {\n                                if (this.state.selectedItems.length < 1) return\n                                this.setState(() => ({ visibleModal: 'edit' }))\n                            }\n                        }\n                    >\n                        编辑\n              </Button>\n                    <Button\n                        type=\"danger\"\n                        icon=\"delete\"\n                        onClick={\n                            () => {\n                                if (this.state.selectedItems.length < 1) return\n                                Modal.confirm({\n                                    title: 'delete',\n                                    content: JSON.stringify(this.state.selectedItems),\n                                    onOk: (callback = () => {\n                                        message.info('删除成功')\n                                        this.setState((prevState) => ({\n                                            dataSource: selectTag([...prevState.dataSource], prevState.selectedItems),\n                                            selectedItems: [], selectedRowKeys: []\n                                        }))\n                                    },\n                                    ) => {\n                                        message.warning('这里改写成向后端发送验证的流程// TODO')\n                                        callback()\n                                    },\n                                }\n                                )\n                            }\n                        }\n                    >\n                        删除\n            </Button>\n                </Card>\n                <div className=\"content-wrap\">\n                    <Table\n                        size=\"small\"\n                        bordered\n                        loading={this.state.loading}\n                        columns={columns}\n                        // 关闭列表 滚动\n                        // scroll={{ \n                        //   x: 1440,\n                        //   y: 580 \n                        // }}  \n                        dataSource={this.state.dataSource}\n                        //若没有pagination属性，会根据antd中table的默认样式，每页显示10个数据，将这一次请求获得的数据进行纯前端样式的静态的分页，*点击切换页面按钮不会发送请求\n                        // 若 有 pagination={false}的 设定，table不会分页， 此次请求获得的所有数据会全部显示出来\n                        pagination={this.state.pagination}\n                        // pagination={false}\n                        // onChange 事件会自动传入这三个参数\n                        onChange={(pagination, filters, sorter) => {\n                            this.setState(() => ({\n                                sortOrder: sorter.order\n                            }))\n                        }}\n                        rowSelection={\n                            {\n                                type: this.state.tableType,\n                                selectedRowKeys: this.state.selectedRowKeys,\n                                // 点击行首小圆圈才能触发onChange事件\n                                onChange: (selectedRowKeys, selectedItems) => {\n                                    this.setState(() => ({\n                                        selectedRowKeys,\n                                        selectedItems,\n                                    }),\n                                    )\n                                }\n                            }\n                        }\n                        onRow={(selectedItem) => ({\n                            onClick: () => {\n                                if (this.state.tableType === 'checkbox') {\n                                    let selectedItems = selectTag([...this.state.selectedItems], [selectedItem])\n                                    let selectedRowKeys = selectTag([...this.state.selectedRowKeys], [selectedItem.key])\n                                    this.setState(() => ({\n                                        selectedRowKeys,\n                                        selectedItems,\n                                    }))\n                                }\n                                if (this.state.tableType === 'radio') {\n                                    let selectedItems = [selectedItem]\n                                    let selectedRowKeys = [selectedItem.key]\n                                    this.setState(() => ({\n                                        selectedRowKeys,\n                                        selectedItems,\n                                    }))\n                                }\n                            },\n                            onMouseEnter: () => { },\n                            onDoubleClick: () => {\n                                Modal.confirm({\n                                    title: '详细信息',\n                                    content: `\n                  ${selectedItem.name}\n                  ${selectedItem.email}\n                `,\n                                    onCancel: () => { },\n                                    onOk: () => { },\n                                })\n                            },\n                        }\n                        )}\n                    />\n                </div>\n            </div >\n        )\n    }\n}\n\nclass UserForm extends React.Component {\n\n    render() {\n        let userInfo = this.props.userInfo[0] || {};\n        const formItemLayout = {\n            labelCol: {\n                span: 5\n            },\n            wrapperCol: {\n                span: 19\n            }\n        };\n\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form layout=\"horizontal\">\n                <FormItem label=\"用户\" {...formItemLayout}>\n                    {\n                        getFieldDecorator('name', {\n                            initialValue: userInfo.name\n                        })(\n                            <Input type=\"text\" placeholder=\"请输入用户名\" />\n                        )\n                    }\n                </FormItem>\n                <FormItem label=\"商户\" {...formItemLayout}>\n                    {\n                        getFieldDecorator('names', {\n                            initialValue: userInfo.role\n                        })(\n                            <RadioGroup>\n                                <Radio value={1}>用户</Radio>\n                                <Radio value={2}>商户</Radio>\n                            </RadioGroup>\n                        )\n                    }\n                </FormItem>\n                <FormItem label=\"状态\" {...formItemLayout}>\n                    {\n                        getFieldDecorator('status', {\n                            initialValue: userInfo.status\n                        })(\n                            <Select>\n                                <Option value={1}>已审核</Option>\n                                <Option value={2}>未审核</Option>\n                                <Option value={3}>已冻结</Option>\n                            </Select>\n                        )\n                    }\n                </FormItem>\n                <FormItem>\n                    <Button\n                        onClick={() => { message.warning('这里改写成向后端发送验证的流程// TODO') }}\n                    >\n                        提交\n          </Button>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nUserForm = Form.create({})(UserForm);\n\n// \nclass userTable extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n        }\n        this.formList = [\n            {\n                type: 'SELECT',\n                label: '订单类型',\n                field: 'type',\n                placeholder: '全部',\n                initialValue: '',\n                width: 100,\n                list: [{ id: '', name: '全部' }, { id: '1', name: '买入' }, { id: '2', name: '卖出' }]\n            },\n            {\n                type: 'SELECT',\n                label: '订单状态',\n                field: 'status',\n                placeholder: '全部',\n                initialValue: '1',\n                width: 100,\n                list: [{ id: '0', name: '全部' }, { id: '1', name: '待付款' }, { id: '2', name: '待确认' }, { id: '3', name: '已完成' }, { id: '4', name: '已过期' }]\n            },\n        ];\n    }\n\n\n    render = () => {\n        const columns = [\n            {\n                title: 'id',\n                dataIndex: 'id'\n            }, {\n                title: '用户名',\n                dataIndex: 'username'\n            }, {\n                title: '性别',\n                dataIndex: 'sex',\n                render(sex) {\n                    return sex === 1 ? '男' : '女';\n                }\n            }, {\n                title: '状态',\n                dataIndex: 'state',\n                render(state) {\n                    let config = {\n                        '1': \"咸🐟一条\",\n                    };\n                    return config[state];\n                }\n            },\n            {\n                title: '生日',\n                dataIndex: 'birthday'\n            }, {\n                title: '联系地址',\n                dataIndex: 'address'\n            },\n        ];\n\n    }\n}","const menuList = [\n    {\n        title: '首页',\n        key: '/home',\n        // children: [{\n        //     title: '子页',\n        //     key: '/home/child',\n        // }]\n    },\n    {\n        title: '用户管理',\n        key: '/manager/users',\n    },\n    {\n        title: '订单管理',\n        key: '/manager/orders',\n    },\n    {\n        title: '广告管理',\n        key: '/manager/ads',\n    },\n    {\n        title: '权限管理',\n        key: '/manager/permission',\n    },\n    {\n        title: '广告',\n        key: '/ads/index',\n    },\n    {\n        title: '发布广告',\n        key: '/business/publish',\n    },\n    {\n        title: '游戏',\n        key: '/games',\n    },\n];\nexport default menuList;\n","import React from \"react\";\nimport { Table, message, Card, Button, Form, Modal, Input, Select, Tree, Transfer } from \"antd\";\nimport Ajax from \"../../components/Ajax\"\nimport menuConfig from \"./../../config/menuConfig\";\nimport { selectTag, pagination } from \"../../utils\"\nimport { getMenus } from '../../components/Api'\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst { TreeNode } = Tree;\n// 或 const TreeNode = Tree.TreeNode\n\nexport default class PermissionUser extends React.Component {\n    state = {\n        isRoleVisible: false,\n        tableType: \"radio\",\n        selectedItems: [],\n    };\n\n    request = () => {\n        Ajax.ajax(\n            'get',\n            '/v1/roles',\n            {},\n            { page: this.page },\n            'https://mook.sunlin.fun/mock/9',\n        )\n            .then(\n                data => {\n                    this.setState(\n                        () => (\n                            {\n                                dataSource: data.list,\n                                pagination: pagination(data, (current) => {\n                                    this.page = current\n                                    this.request()\n                                }),\n                            }\n                        )\n                    )\n                })\n            .catch(\n                () => message.error(\"数据渲染失败\")\n            )\n    }\n\n    componentWillMount() {\n        // 通过生命周期函数加载接口\n        this.request()\n    }\n\n    // 打开创建角色弹框\n    handleRole = () => {\n        this.setState({\n            isRoleVisible: true\n        });\n    };\n\n    // 角色提交\n    handleRoleSubmit = () => {\n        const data = this.roleForm.props.form.getFieldsValue();\n        this.setState({\n            isRoleVisible: false //关闭弹框\n        });\n        this.roleForm.props.form.resetFields(); // 调用表单重置(清空表单数据)\n        this.request(); //刷新列表数据\n    }\n\n    // 权限设置\n    handlePermission = () => {\n        let item = this.state.selectedItems[0]; //取出当前选中的项\n        this.setState({\n            isPermVisible: true,\n            detailInfo: item,\n            // menuInfo: item.menus,\n            menuInfo: (getMenus(item.role)).map(item => item.key),\n        });\n    };\n\n    handlePermEditSubmit = () => {\n        // 获取表单的值 ,添加wrappedComponentRef属性\n        let data = this.permForm.props.form.getFieldsValue();\n        data.role_key = this.state.selectedItem.key; // 将角色key传回\n        data.menus = this.state.menuInfo; // 需要将menus数据传到接口\n\n        this.setState({\n            isPermVisible: false\n        });\n        this.request(); //刷新列表数据\n    }\n\n    // 用户授权\n    handleUserAuth = () => {\n        let item = this.state.selectedItems[0]; //取出当前选中的项,为了兼容checkbox 使用数组存取\n        this.setState({\n            isUserVisible: true,\n            detailInfo: item\n        });\n        // 获取目标数据\n        this.getRoleUserList(item.id);\n    };\n\n    // 获取用户角色列表\n    getRoleUserList = id => {\n        // id: 角色id , 获取角色id\n        Ajax.ajax(\n            'get',\n            '/v1/role/users',\n            {},\n            { page: this.page },\n            'https://mook.sunlin.fun/mock/9',\n        )\n            .then(res => {\n                if (res) {\n                    //请求成功,筛选目标用户\n                    this.getAuthUserList(res.list);\n                }\n            });\n    };\n\n    // 筛选目标用户\n    getAuthUserList = dataSource => {\n        // 将数据(目标用户,全量用户)进行过滤的方法\n        const roleUsers = [];\n        const targetKeys = [];\n        if (dataSource && dataSource.length > 0) {\n            // 有数据\n            for (let i = 0; i < dataSource.length; i++) {\n                const data = {\n                    key: dataSource[i].key,\n                    title: dataSource[i].name,\n                    role: dataSource[i].role\n                };\n\n                console.log(data.role, this.state.selectedItems[0])\n                if (data.role === this.state.selectedItems[0].role) {\n                    // 如果role相同，说明是目标用户,加到targetKeys数组\n                    targetKeys.push(data.key);\n                }\n                //全量用户\n                roleUsers.push(data)\n                this.setState(() => ({\n                    roleUsers,\n                    targetKeys\n                }))\n            }\n        }\n    }\n\n    // 用户授权提交\n    handleUserSubmit = () => {\n        let data = {};\n        data.user_ids = this.state.targetKeys;\n        data.role = this.state.selectedItems[0].role;\n        this.setState({\n            isUserVisible: false\n        });\n        this.request();\n    }\n\n    render() {\n        const columns = [\n            {\n                title: \"角色\",\n                dataIndex: \"role_name\",\n            },\n            {\n                title: \"使用状态\",\n                dataIndex: \"status\",\n                render: (status) => {\n                    return status === 0 ? \"停用\" : \"启用\";\n                }\n            },\n            {\n                title: \"可访问功能\",\n                dataIndex: \"role\",\n                render: (role) =>\n                    getMenus(role).map(item => `${item.title}, `)\n            },\n        ];\n        return (\n            <div>\n                <Card>\n                    <Button\n                        type=\"primary\"\n                        onClick={this.handleRole}>\n                        添加新角色\n          </Button>\n                    <Button\n                        type=\"primary\"\n                        style={{ marginLeft: 10, marginRight: 10 }}\n                        onClick={this.handlePermission}\n                        disabled={this.state.selectedItems.length < 1}\n                    >\n                        设置权限\n          </Button>\n                    <Button\n                        type=\"primary\"\n                        onClick={this.handleUserAuth}\n                        disabled={!(this.state.selectedItems.length > 0)}\n                    >\n                        用户授权\n          </Button>\n                </Card>\n                <div className=\"content-wrap\">\n\n                    <Table\n                        size=\"small\"\n                        bordered\n                        loading={this.state.loading}\n                        columns={columns}\n                        // 关闭列表 滚动\n                        // scroll={{ \n                        //   x: 1440,\n                        //   y: 580 \n                        // }}  \n                        dataSource={this.state.dataSource}\n                        //若没有pagination属性，会根据antd中table的默认样式，每页显示10个数据，将这一次请求获得的数据进行纯前端样式的静态的分页，*点击切换页面按钮不会发送请求\n                        // 若 有 pagination={false}的 设定，tab le不会分页， 此次请求获得的所有数据会全部显示出来\n                        pagination={this.state.pagination}\n                        // pagination={false}\n                        // onChange 事件会自动传入这三个参数\n                        onChange={(pagination, filters, sorter) => {\n                            this.setState(() => ({\n                                sortOrder: sorter.order\n                            }))\n                        }}\n                        rowSelection={\n                            {\n                                type: this.state.tableType,\n                                selectedRowKeys: this.state.selectedRowKeys,\n                                // 点击行首小圆圈才能触发onChange事件\n                                onChange: (selectedRowKeys, selectedItems) => {\n                                    this.setState(() => ({\n                                        selectedRowKeys,\n                                        selectedItems,\n                                    }),\n                                    )\n                                }\n                            }\n                        }\n                        onRow={(selectedItem) => ({\n                            onClick: () => {\n                                if (this.state.tableType === 'checkbox') {\n                                    let selectedItems = selectTag([...this.state.selectedItems], [selectedItem])\n                                    let selectedRowKeys = selectTag([...this.state.selectedRowKeys], [selectedItem.key])\n                                    this.setState(() => ({\n                                        selectedRowKeys,\n                                        selectedItems,\n                                    }))\n                                }\n                                if (this.state.tableType === 'radio') {\n                                    let selectedItems = [selectedItem]\n                                    let selectedRowKeys = [selectedItem.key]\n                                    this.setState(() => ({\n                                        selectedRowKeys,\n                                        selectedItems,\n                                    }))\n                                }\n                            },\n                            onMouseEnter: () => { },\n                        })\n                        }\n                    />\n                </div>\n                <Modal\n                    title=\"添加新角色\"\n                    visible={this.state.isRoleVisible}\n                    onOk={this.handleRoleSubmit}\n                    onCancel={() => {\n                        this.roleForm.props.form.resetFields(); // 表单重置\n                        this.setState({\n                            isRoleVisible: false\n                        });\n                    }}\n                >\n                    <RoleForm\n                        wrappedComponentRef={inst => {\n                            this.roleForm = inst;\n                        }}\n                    />\n                </Modal>\n                <Modal\n                    title=\"设置权限\"\n                    visible={this.state.isPermVisible}\n                    width={600}\n                    onOk={this.handlePermEditSubmit}\n                    onCancel={() => {\n                        this.setState(() => ({\n                            isPermVisible: false\n                        }));\n                    }}\n                >\n                    <PermEditForm\n                        wrappedComponentRef={inst => {\n                            this.permForm = inst;\n                        }}\n                        detailInfo={this.state.detailInfo}\n                        menuInfo={this.state.menuInfo}\n                        patchMenuInfo={checkedKeys => {\n                            this.setState({\n                                menuInfo: checkedKeys\n                            });\n                        }}\n                    />\n                </Modal>\n                <Modal\n                    title=\"用户授权\"\n                    visible={this.state.isUserVisible}\n                    width={800}\n                    onOk={this.handleUserSubmit}\n                    onCancel={() => {\n                        this.setState({\n                            isUserVisible: false\n                        });\n                    }}\n                >\n                    <RoleAuthForm\n                        wrappedComponentRef={inst => {\n                            this.userAuthForm = inst;\n                        }}\n                        detailInfo={this.state.detailInfo}\n                        targetKeys={this.state.targetKeys}\n                        roleUsers={this.state.roleUsers}\n                        patchUserInfo={(targetKeys) => {\n                            this.setState({ targetKeys });\n                        }}\n                    />\n                </Modal>\n            </div>\n        );\n    }\n}\n\n// 子组件一-------角色绑定\nclass RoleForm extends React.Component {\n    render() {\n        const formItemLayout = {\n            labelCol: {\n                span: 5\n            },\n            wrapperCol: {\n                span: 19\n            }\n        };\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form layout=\"horizontal\">\n                <FormItem label=\"角色名称\" {...formItemLayout}>\n                    {getFieldDecorator(\"role\")(\n                        <Input type=\"text\" placeholder=\"请输入角色名称\" />\n                    )}\n                </FormItem>\n                <FormItem label=\"状态\" {...formItemLayout}>\n                    {getFieldDecorator(\"state\")(\n                        <Select>\n                            <Option value={1}>开启</Option>\n                            <Option value={2}>关闭</Option>\n                        </Select>\n                    )}\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nRoleForm = Form.create({})(RoleForm);\n\n// 子组件二---------设置权限\nclass PermEditForm extends React.Component {\n    onCheck = checkedKeys => {\n        // 将当前选中的项传回父组件  PermEditForm\n        this.props.patchMenuInfo(checkedKeys);\n    };\n\n    // 递归渲染权限列表\n    /**\n     *\n     * @param data:menuConfig.js 导入的权限列表\n     */\n    renderTreeNodes = data => {\n        // 判断当前是否有子节点,如果有子节点children继续遍历,直到没有子节点为止\n        return data.map(item => {\n            if (item.children) {\n                // 判断当前是否有子节点\n                return (\n                    <TreeNode title={item.title} key={item.key}>\n                        {this.renderTreeNodes(item.children)}\n                    </TreeNode>\n                );\n            } else {\n                return <TreeNode title={item.title} key={item.key} />;\n                // 也可写作\n                // return <TreeNode {...item}/>\n            }\n        });\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {\n                span: 5\n            },\n            wrapperCol: {\n                span: 19\n            }\n        };\n        const { getFieldDecorator } = this.props.form;\n        const detail_info = this.props.detailInfo;\n        const menu_info = this.props.menuInfo;\n        return (\n            <Form layout=\"horizontal\">\n                <FormItem label=\"角色名称\" {...formItemLayout}>\n                    <Input disabled placeholder={detail_info.role_name} />\n                </FormItem>\n                <FormItem label=\"状态\" {...formItemLayout}>\n                    {getFieldDecorator(\"status\", {\n                        initialValue: detail_info.status + \"\"\n                    })(\n                        <Select>\n                            <Option value=\"1\">启用</Option>\n                            <Option value=\"0\">停用</Option>\n                        </Select>\n                    )}\n                </FormItem>\n                <Tree\n                    checkable\n                    defaultExpandAll\n                    onCheck={checkedKeys => {\n                        // checkedKeys: 当前选中的节点\n                        this.onCheck(checkedKeys);\n                    }}\n                    checkedKeys={menu_info}\n                >\n                    <TreeNode title=\"平台权限\" key=\"platform_all\">\n                        {this.renderTreeNodes(menuConfig)}\n                    </TreeNode>\n                </Tree>\n            </Form>\n        );\n    }\n}\n\nPermEditForm = Form.create({})(PermEditForm);\n\n// 子组件三---------用户授权\nclass RoleAuthForm extends React.Component {\n    filterOption = (inputValue, option) => {\n        return option.title.indexOf(inputValue) > -1;\n    };\n\n    handleChange = (targetKeys) => {\n        this.props.patchUserInfo(targetKeys);\n    };\n    render() {\n        const formItemLayout = {\n            labelCol: {\n                span: 5\n            },\n            wrapperCol: {\n                span: 19\n            }\n        };\n        const detail_info = this.props.detailInfo;\n        return (\n            <Form layout=\"horizontal\">\n                <FormItem label=\"角色名称\" {...formItemLayout}>\n                    <Input disabled placeholder={detail_info.role_name} />\n                </FormItem>\n\n                <FormItem label=\"选择用户\" {...formItemLayout}>\n                    <Transfer\n                        listStyle={{ width: 250, height: 400 }}\n                        dataSource={this.props.roleUsers}\n                        titles={[\"待选用户\", \"已选用户\"]}\n                        showSearch\n                        filterOption={this.filterOption} //过滤选项\n                        targetKeys={this.props.targetKeys} //目标数据源\n                        onChange={this.handleChange} //控制目标数据源\n                        render={item => item.title} //渲染数据\n                    />\n                </FormItem>\n            </Form>\n        );\n    }\n}\nRoleAuthForm = Form.create({})(RoleAuthForm);","import React, { Component } from 'react';\nimport { goToUrl } from '../../utils'\nimport { Route, HashRouter, Switch } from 'react-router-dom'\nimport { Modal, Form, Card, Input, Icon, Button, message, } from 'antd';\nexport default class StepForm extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <div>\n                    <Route path=\"/ads\"\n                        render={() =>\n                            <div>\n                                <Switch>\n                                    <Route\n                                        exact={true}\n                                        path=\"/ads/info\"\n                                        render={() =>\n                                            <Info\n                                                selectedItem={this.props.selectedItem}\n                                            />\n                                        }\n                                    />\n                                    <Route\n                                        path=\"/ads/confirm\"\n                                        render={() =>\n                                            <Confirm\n                                                refreshData={this.props.refreshData}\n                                            />}\n                                    />\n                                </Switch>\n                            </div>\n                        }\n                    />\n                </div>\n            </HashRouter >\n        );\n    }\n}\n\nconst FormItem = Form.Item;\nclass FormInfo extends React.Component {\n    handleSubmit = () => {//绑定提交事件进行校验\n        let userInfo = this.props.form.getFieldsValue();//object对象,包含表单中所有信息\n        // 校验表单输入是否符合规则， 不符合err会包含信息, 校验通过err为空\n        this.props.form.validateFields((err, values) => {\n            if (!err) {// ${}  是变量\n                message.success(\"正在下单\")\n                // 前端验证完毕, 向后端发起调用\n                goToUrl('/ads/confirm')\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: 24,\n                sm: 4\n            },\n            wrapperCol: {\n                xs: 24,\n                sm: 12\n            }\n        };\n        return (\n            <div>\n                <Card title=\"下单\"\n                >\n                    <Form\n                        layout=\"horizontal\"\n                    >\n                        <FormItem>\n                            <p>{JSON.stringify(this.props.selectedItem)}</p>\n                        </FormItem>\n                        <FormItem\n                            label=\"交易量\"\n                            {...formItemLayout}\n                        >\n                            {\n                                getFieldDecorator('userName', {\n                                    initialValue: '',\n                                    rules: [\n                                        {\n                                            required: true,\n                                            message: '金额不能为空'\n                                        },\n                                        {\n                                            min: 1, max: 8,\n                                            message: '长度不在范围内'\n                                        },\n                                        {\n                                            pattern: new RegExp('^\\\\d+$', 'g'),\n                                            message: '必须为数字'\n                                        },\n                                    ]\n                                })(\n                                    <Input prefix={<Icon type=\"money-collect\" />} placeholder=\"请输入交易金额\" />\n                                )\n                            }\n                        </FormItem>\n                        <FormItem\n                            style={{\n                                marginLeft: 'auto',\n                                marginRight: 'auto',\n                                width: 200,\n                            }}\n                        >\n                            <Button\n                                type=\"primary\"\n                                onClick={\n                                    () => {\n                                        this.handleSubmit()\n                                    }\n                                }\n                            >\n                                确认订单\n            </Button>\n                        </FormItem>\n                    </Form>\n                </Card>\n            </div >\n        )\n    }\n}\nconst Info = Form.create()(FormInfo)\n\nclass FormConfirm extends React.Component {\n    handleSubmit = () => {\n        goToUrl('/ads/index')\n        Modal.success({\n            title:\"请等待商户确认\"\n        })\n        this.props.refreshData()\n    }\n    render() {\n        return (\n            <Card title=\"付款码\">\n                <Form>\n                    <FormItem\n                    >\n                        <img alt=\"Cierra.jpg\" src=\"https://img.moegirl.org/common/thumb/a/aa/Cierra01.jpg/260px-Cierra01.jpg\" />\n                    </FormItem>\n                    <FormItem\n                        style={{\n                            margin: 'auto',\n                            width: 200,\n                        }}\n                    >\n                        <Button\n                            type=\"primary\"\n                            onClick={\n                                () => {\n                                    this.handleSubmit()\n                                }\n                            }\n                        >\n                            我已付款\n        </Button>\n                    </FormItem>\n                </Form>\n            </Card>\n        )\n    }\n}\n\nconst Confirm = Form.create()(FormConfirm)","import React, { Component } from 'react';\nimport {Card, Table, Modal, Button, message, Badge, } from 'antd';\nimport Ajax from '../../components/Ajax'\nimport { pagination, selectTag, goToUrl } from '../../utils'\nimport { NavLink } from 'react-router-dom'\nimport '../../style/common.scss'\nimport StepForm from '../../components/StepForm'\n\nexport default class adTable extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      tableType: 'radio',\n      dataSource: [],\n      allSource: [],\n      selectedRowKeys: [],\n      selectedItems: [],\n      pagination: {},\n      sortOrder: false,\n      isInitial: false,\n      globalFilter: false,\n      formKey: Math.random().toString(18).substr(2),\n      defaultFilterRules: () => true,\n    }\n    this.page = 1\n    this.userForm = undefined\n    this.filterRules = this.state.defaultFilterRules\n  }\n  componentWillMount = () => {\n    //  初始化载入ads页面时， 将路由跳转到ads/index\n    goToUrl('/ads/index')\n  }\n\n  componentDidMount = () => {\n    this.request()\n  }\n\n  changeFormKey = () => {\n    this.setState(() => ({\n      formKey: Math.random().toString(18).substr(2),\n    }\n    )\n    )\n  }\n\n  request = () => {\n    Ajax.ajax(\n      'get',\n      '/v1/users',\n      {},\n      { page: this.page },\n      'https://mook.sunlin.fun/mock/9',\n    )\n      .then(\n        data => {\n          if (!this.state.globalFilter) {\n            this.filterRules = this.state.defaultFilterRules\n          }\n          this.setState(\n            () => (\n              {\n                allSource: data.list,\n                dataSource: data.list.filter(this.filterRules),\n                loading: false,\n\n                isInitial: true,\n                pagination: pagination(data, (current) => {\n                  this.page = current\n                  this.request()\n                })\n              }))\n        }).catch(() => message.error(\"数据渲染失败\")\n        )\n  }\n\n\n  render() {\n    const roleMap = {\n      1: \"管理员\",\n      2: \"商户\",\n      3: \"普通用户\",\n    }\n\n    const statusMap = {\n      1: <Badge status=\"success\" text=\"已审批\" />,\n      2: <Badge status=\"default\" text=\"未审批\" />,\n      3: <Badge status=\"error\" text=\"冻结中\" />,\n    }\n\n    const columns = [{\n      title: 'id',\n      key: 'id',\n      width: 80,\n      dataIndex: 'id',\n      sorter: (a, b) => a.id - b.id,\n      SortOrder: this.state.sortOrder,\n      // 横向滚动头部锁定\n      // fixed: 'left',\n    },\n    {\n      title: '用户名',\n      key: 'name',\n      width: 80,\n      dataIndex: 'name',\n      // fixed: 'left',\n    },\n    {\n      title: '邮箱',\n      key: 'email',\n      width: 80,\n      dataIndex: 'email'\n    },\n    {\n      title: '角色',\n      key: 'role',\n      width: 80,\n      dataIndex: 'role',\n      render: (text) => {\n        return roleMap[text]\n      },\n    },\n    {\n      title: '状态',\n      key: 'status',\n      width: 80,\n      dataIndex: 'status',\n      render: (text) => statusMap[text],\n    },\n    ]\n\n    return (\n      <div className=\"content-wrap\">\n        <Modal\n          visible={\n            this.state.selectedItems.length > 0\n            &&\n            (\n              this.props.match.params.page === \"info\"\n              ||\n              this.props.match.params.page === \"confirm\"\n            )\n          }\n          // 退出下单界面， 广告信息需要更新\n          onCancel={\n            () => {\n              message.warning('下单中断')\n              goToUrl('/ads/index')\n              this.request()\n            }\n          }\n          afterClose={this.changeModalKey}\n          footer={null}\n        >\n          <StepForm\n            key={this.state.formKey}\n            selectedItem={this.state.selectedItems[0]}\n            refreshData={this.request}\n            changeModalKey={this.changeMormKey} />\n        </Modal >\n        <Card>\n          <Button\n            type=\"primary\"\n          >\n            <NavLink to=\"/ads/info\">下单</NavLink>\n          </Button>\n        </Card>\n        <Table\n          size=\"small\"\n          bordered\n          loading={this.state.loading}\n          columns={columns}\n          // 关闭列表 滚动\n          // scroll={{ \n          //   x: 1440,\n          //   y: 580 \n          // }}  \n          dataSource={this.state.dataSource}\n          //若没有pagination属性，会根据antd中table的默认样式，每页显示10个数据，将这一次请求获得的数据进行纯前端样式的静态的分页，*点击切换页面按钮不会发送请求\n          // 若 有 pagination={false}的 设定，tab le不会分页， 此次请求获得的所有数据会全部显示出来\n          pagination={this.state.pagination}\n          // pagination={false}\n          // onChange 事件会自动传入这三个参数\n          onChange={(pagination, filters, sorter) => {\n            this.setState(() => ({\n              sortOrder: sorter.order\n            }))\n          }}\n          rowSelection={\n            {\n              type: this.state.tableType,\n              selectedRowKeys: this.state.selectedRowKeys,\n              // 点击行首小圆圈才能触发onChange事件\n              onChange: (selectedRowKeys, selectedItems) => {\n                this.setState(() => ({\n                  selectedRowKeys,\n                  selectedItems,\n                }),\n                )\n              }\n            }\n          }\n          onRow={(selectedItem) => ({\n            onClick: () => {\n              if (this.state.tableType === 'checkbox') {\n                let selectedItems = selectTag([...this.state.selectedItems], [selectedItem])\n                let selectedRowKeys = selectTag([...this.state.selectedRowKeys], [selectedItem.key])\n                this.setState(() => ({\n                  selectedRowKeys,\n                  selectedItems,\n                }))\n              }\n              if (this.state.tableType === 'radio') {\n                let selectedItems = [selectedItem]\n                let selectedRowKeys = [selectedItem.key]\n                this.setState(() => ({\n                  selectedRowKeys,\n                  selectedItems,\n                }))\n              }\n            },\n            onMouseEnter: () => { },\n            onDoubleClick: () => {\n              Modal.confirm({\n                title: '详细信息',\n                content: `\n                  ${selectedItem.name}\n                  ${roleMap[selectedItem.role]}\n                  ${selectedItem.email}\n                `,\n                onCancel: () => { },\n                onOk: () => { },\n              })\n            },\n          }\n          )}\n        />\n      </div>\n    )\n  }\n}\n","import React from \"react\"\nimport { Card } from \"antd\"\nimport '../../style/common.scss'\nimport {\n  Chart,\n  Geom,\n  Axis,\n  Tooltip,\n} from \"bizcharts\";\n\nclass Home extends React.Component {\n  render() {\n    const data = [\n      {\n        day: \"1\",\n        value: 0.89\n      },\n      {\n        day: \"2\",\n        value: 0.99\n      },\n      {\n        day: \"3\",\n        value: 0.96\n      },\n      {\n        day: \"4\",\n        value: 1.12\n      },\n      {\n        day: \"5\",\n        value: 1.22\n      },\n      {\n        day: \"6\",\n        value: 0.88\n      },\n      {\n        day: \"7\",\n        value: 1.11\n      },\n      {\n        day: \"8\",\n        value: 1.09\n      },\n      {\n        day: \"9\",\n        value: 1.3\n      }\n    ];\n    const cols = {\n      value: {\n        min: 0\n      },\n      day: {\n        range: [0, 1]\n      }\n    };\n    return (\n      <div className=\"content-wrap\">\n        <Card title=\"走势\">\n          <Chart height={400} data={data} scale={cols} forceFit>\n            <Axis name=\"day\" />\n            <Axis name=\"value\" />\n            <Tooltip\n              crosshairs={{\n                type: \"y\"\n              }}\n            />\n            <Geom type=\"line\" position=\"day*value\" size={2} />\n            <Geom\n              type=\"point\"\n              position=\"day*value\"\n              size={4}\n              shape={\"circle\"}\n              style={{\n                stroke: \"#fff\",\n                lineWidth: 1\n              }}\n            />\n          </Chart>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\r\nimport { connect } from \"react-redux\"\r\nimport { actionCreator } from \"../../redux/action\"\r\nimport { Button, Card, Form, Icon, Input, Checkbox, message, Radio } from \"antd\";\r\nimport { goToUrl } from \"../../utils\"; //导入公共机制\r\nimport Ajax from '../../components/Ajax'\r\n\r\nconst RadioGroup = Radio.Group;\r\nconst FormItem = Form.Item;\r\nclass FormPublish extends React.Component {\r\n  post = (formData) => {\r\n    Ajax.ajax(\r\n      'post',\r\n      '/user-login',\r\n      {},\r\n      formData,\r\n      \"http://207.148.65.10:8080\",\r\n    )\r\n      .then(\r\n        (res) => {\r\n        }\r\n      ).catch(() => { })\r\n  }\r\n\r\n  handleSubmit = () => {//绑定提交事件进行校验\r\n    let formData = this.props.form.getFieldsValue()// 可以(获取表单中)object对象\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {// ${}  是变量\r\n        this.autoLogin = formData.autoLogin\r\n        this.post(formData)\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const offsetLayout = {\r\n      wrapperCol: {\r\n        xs: 24,\r\n        sm: {\r\n          span: 12,\r\n          offset: 4\r\n        }\r\n      }\r\n    };\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: 24,\r\n        sm: 4\r\n      },\r\n      wrapperCol: {\r\n        xs: 24,\r\n        sm: 12\r\n      }\r\n    };\r\n    return (\r\n      <div>\r\n        <Card title=\"发表广告\"\r\n        >\r\n          <Form\r\n            layout=\"horizontal\"\r\n          >\r\n            <FormItem label=\"金额\" {...formItemLayout}>\r\n              {\r\n                getFieldDecorator('phone', {\r\n                  initialValue: '',\r\n                  rules: [\r\n                    {\r\n                      pattern: new RegExp('^\\\\d+$', 'g'),\r\n                      message: '金额必须为数字'\r\n                    },\r\n                    {\r\n                      required: true,\r\n                      message: '金额不能为空'\r\n                    },\r\n                  ]\r\n                })(\r\n                  <Input placeholder=\"请输入发布金额\" />\r\n                )\r\n              }\r\n            </FormItem>\r\n            <FormItem label=\"发布类型\" {...formItemLayout}>\r\n              {\r\n                getFieldDecorator('adType', {\r\n                  initialValue: \"0\",\r\n                  rules: [{\r\n                    required: true,\r\n                    message: '类型必选'\r\n                  },\r\n                  ]\r\n                }\r\n                )(\r\n                  <RadioGroup>\r\n                    <Radio value={0}>买入</Radio>\r\n                    <Radio value={1}>卖出</Radio>\r\n                  </RadioGroup>\r\n                )\r\n              }\r\n            </FormItem>\r\n            <FormItem\r\n              style={{\r\n                marginLeft: 'auto',\r\n                marginRight: 'auto',\r\n                width: 200,\r\n              }}\r\n            >\r\n              <Button type=\"primary\" onClick={this.handleSubmit}>发布</Button>\r\n            </FormItem>\r\n          </Form>\r\n        </Card>\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\n// props 属性\r\nconst mapStateToProps = (state) => ({\r\n  isLogin: state.isLogin,\r\n  user: state.user\r\n})\r\n\r\n// props 方法\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    saveLoginData(data) {\r\n      dispatch(actionCreator.saveLoginData(data))\r\n    },\r\n  }\r\n}\r\n\r\n// 把逻辑方法与UI组件连接起来变成新容器组件\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(FormPublish))","import React from 'react'\nimport UserTable from \"../../pages/manager/userTable\";\nimport AdTable from \"../../pages/manager/adTable\";\nimport OrderTable from \"../../pages/manager/orderTable\";\nimport PermissionTable from \"../../pages/manager/permissionTable\";\nimport adTable from \"../../pages/ad/\"\nimport Home from \"../../pages/home\";\nimport Publish from \"../../pages/form/publish\";\nimport { Route } from 'react-router-dom'\n// 本地缓存了菜单列表\nconst menus = {\n    undefined: [\n        {\n            title: '首页',\n            key: '/home',\n            // children: [{\n            //     title: '子页',\n            //     key: '/home/child',\n\n            // }]\n        },\n    ],\n    1: [\n        {\n            title: '首页',\n            key: '/home',\n        },\n        {\n            title: '用户管理',\n            key: '/manager/users',\n        },\n        {\n            title: '订单管理',\n            key: '/manager/orders',\n        },\n        {\n            title: '广告管理',\n            key: '/manager/ads',\n        },\n        {\n            title: '权限管理',\n            key: '/manager/permission',\n        },\n    ],\n    2: [\n        {\n            title: '首页',\n            key: '/home'\n        },\n        {\n            title: '广告',\n            key: '/ads/index',\n        },\n        {\n            title: '发布广告',\n            key: '/business/publish',\n        },\n    ],\n    0: [\n        {\n            title: '首页',\n            key: '/home'\n        },\n        {\n            title: '广告',\n            key: '/ads/index',\n        },\n        {\n            title: '游戏',\n            key: '/games',\n        },\n    ],\n}\n// 菜单列表对应的权限路由规则\nconst routeMap = {\n    '/home': <Route key=\"/home\" path=\"/home\" component={Home} />,\n    '/ads/index': <Route key=\"/ads/:page\" path=\"/ads/:page\" component={adTable} />,\n    '/manager/users': <Route key=\"/manager/users\" path=\"/manager/users\" component={UserTable} />,\n    '/manager/orders': <Route key=\"/manager/orders\" path=\"/manager/orders\" component={OrderTable} />,\n    '/manager/ads': <Route key=\"/manager/ads\" path=\"/manager/ads\" component={AdTable} />,\n    '/manager/permission': <Route key=\"/manager/permission\" path=\"/manager/permission\" component={PermissionTable} />,\n    '/business/publish': <Route key=\"/business/publish\" path=\"/business/publish\" component={Publish} />\n}\n\nexport const getMenus = (userType) => menus[userType]\nexport const getRoutes = (userType) => getMenus(userType).map(item => item.key).map(item => routeMap[item])","import React from \"react\";\nimport { connect } from \"react-redux\"\nimport { Menu } from \"antd\"; //导入子组件菜单\nimport { NavLink } from 'react-router-dom'\nimport { getMenus } from '../Api'\nimport \"./index.scss\";\n\nconst SubMenu = Menu.SubMenu;\n\nclass NavLeft extends React.Component {\n  \n  //菜单渲染\n  //通过递归(遍历)实现菜单(是一个List)的渲染\n  renderMenu = data => {\n    return data.map(item => {\n      //如果item有子元素,遍历自己,再次调用,直到子节点加载完毕\n      if (item.children) {\n        return (\n          <SubMenu title={item.title} key={item.key}>\n            {this.renderMenu(item.children)}\n          </SubMenu>\n        );\n      }\n      return (\n        <Menu.Item title={undefined} key={item.key}>\n          <NavLink to={item.key}>{item.title}</NavLink>\n        </Menu.Item>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <Menu mode=\"horizontal\">\n        {/* 依据redux中保存的用户类型返回导航菜单,并进行渲染 */}\n        {this.renderMenu(getMenus(this.props.userType))}\n      </Menu>\n    );\n  }\n}\n// props 属性\nconst mapStateToProps = (state) => ({\n  isLogin: state.isLogin,\n  user: state.user,\n  userType: state.userType,\n})\n\n// 把逻辑方法与UI组件连接起来变成新容器组件\nexport default connect(mapStateToProps)(NavLeft)","import React from \"react\";\nimport { Row } from \"antd\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport NavLeft from \"./components/NavLeft\";\nimport { connect } from \"react-redux\"\nimport { actionCreator } from \"./redux/action\"\nimport './style/common.scss'\nimport 'antd/dist/antd.css'\nimport Ajax from './components/Ajax'\n\nclass MainPage extends React.Component {\n  componentWillMount = () => {\n    if (!this.props.isLogin) {\n      if (localStorage.getItem('token')) {\n        let token = localStorage.getItem('token')\n        this.autoLoginByToken(token)\n      } else if (sessionStorage.getItem('token')) {\n        let token = sessionStorage.getItem('token')\n        this.autoLoginByToken(token)\n      } else {\n        console.log('用户需手动登录')\n      }\n    }\n  }\n  autoLoginByToken = (token) =>\n    new Promise((resolve, reject) => {\n      Ajax.ajax(\n        'get',\n        '/user/query/token',\n        {},\n        { 'token': token },\n        'http://207.148.65.10:8080',\n      )\n        .then(\n          (res) => {\n            this.props.saveLoginData(res.data)\n            sessionStorage.setItem(\"token\", res.data.token);\n            return resolve(res.data)\n          }\n        ).catch((error) => {\n          console.log(\"token 自动登录失败\", error)\n        })\n    })\n  render() {\n    return (\n      <Row className=\"container\" >\n        <Row className=\"main\">\n          <Header />\n          <Row className=\"nav-left\">\n            <NavLeft />\n          </Row>\n          <Row className=\"content\">\n            {this.props.children}\n          </Row>\n          <Footer />\n        </Row>\n      </Row>\n    );\n  }\n}\n\n// props 属性\nconst mapStateToProps = (state) => ({\n  isLogin: state.isLogin,\n  user: state.user\n})\n\n// props 方法\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    saveLoginData(data) {\n      dispatch(actionCreator.saveLoginData(data))\n    },\n  }\n}\n\n// 把逻辑方法与UI组件连接起来变成新容器组件\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage)","import React from \"react\";\n\nexport default class NoMatch extends React.Component {\n  render() {\n    return (\n      <div> \n      <div style={{ textAlign: \"center\", fontSize: \"24\" }}>404 No Found!!!</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport App from \"./app\"\nimport Common from \"./common\"\nimport Login from \"./pages/form/login\";\nimport Register from \"./pages/form/register\";\nimport MainPage from \"./mainpage\";\nimport Nomatch from \"./pages/nomatch\"\nimport { connect } from \"react-redux\"\nimport { getRoutes } from \"./components/Api\"\n\nclass IRouter extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <App>\n          <Switch>\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/common\"\n              render={() =>\n                <Common>\n                  <div>hello</div>\n                </Common>\n              }\n            />\n            <Route path=\"/\"\n              render={() =>\n                <MainPage>\n                  <div>\n                    <Switch>\n                      <Route exact={true} path=\"/\" >\n                        <Redirect to=\"/home/\" />\n                      </Route>\n                      {getRoutes(this.props.user.userType)}\n                      <Route component={Nomatch} />\n                    </Switch>\n                  </div>\n                </MainPage>\n              }\n            />\n          </Switch>\n        </App>\n      </HashRouter >\n    );\n  }\n}\n\n// props 属性\nconst mapStateToProps = (state) => ({\n  user: state.user\n})\n\n// 把逻辑方法与UI组件连接起来变成新容器组件\nexport default connect(mapStateToProps)(IRouter)","import { actionTypes } from '../action'\n\nconst defaultState = {\n  isLogin: false,\n  user: {},\n  userType: undefined,\n  token: undefined,\n}\n\nexport default (previousState = defaultState, action) => {\n\n  const newState = JSON.parse(JSON.stringify(previousState))\n\n  if (action.type === actionTypes.CLEAR_LOGIN_DATA) {\n    newState.isLogin = false\n    newState.user = {}\n    newState.token = undefined\n    newState.userType = undefined\n  }\n\n  if (action.type === actionTypes.SAVE_LOGIN_DATA) {\n    newState.isLogin = true\n    //传来的data就是获取的user对象\n    newState.user = action.data\n    newState.token = action.data.token\n    newState.userType = action.data.userType\n  }\n\n  return newState\n}","import { createStore, applyMiddleware, compose } from 'redux'\nimport reducer from '../reducer'\nimport thunk from 'redux-thunk'\n\n//通过数组扩展中间件\nconst middleware = [thunk]\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(...middleware),\n  // other store enhancers if any\n);\nconst store = createStore(reducer, enhancer);\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Router from \"./router\"\nimport { Provider } from 'react-redux'\nimport store from \"./redux/store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router />\n  </Provider >,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}